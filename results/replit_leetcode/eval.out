Reading samples...
Running test suites...


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    if len(numbers) < 2:
        return False
    
    prev_diff = abs(numbers[0] - numbers[1])
    for i in range(2, len(numbers)):
        diff = abs(numbers[i] - numbers[i - 1])
        if diff > threshold:
            return True
        prev_diff = diff
    
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(1, len(numbers)):
        if abs(numbers[i] - numbers[i - 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    if len(numbers) < 2:
        return False
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) > threshold:
            return True
    return False


ProblemHumanEval/0: failed: 
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    if len(numbers) < 2:
        return False
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) > threshold:
            return True
    return False


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []
    
    for c in paren_string:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if stack:
                result.append(stack.pop())
            else:
                return []
    
    if stack:
        return []
    
    return result


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []
    for c in paren_string:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                result.append(stack.pop())
            stack.pop()
            stack.append(c)
    return result


ProblemHumanEval/1: failed: pop from empty list
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []
    for c in paren_string:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                result.append(stack.pop())
            stack.pop()
            result.append(c)
    return result


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []
    
    for c in paren_string:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if stack:
                stack.pop()
            else:
                result.append(c)
    
    while stack:
        result.append(stack.pop())
    
    return result


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/1: failed: 
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    stack = []


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimal = number - integer
    return decimal


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer_part = int(number)
    decimal_part = number - integer_part
    return decimal_part


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    return number - int(number)


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer, decimals = divmod(number, 1)
    return decimals


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimal = number - integer
    return decimal


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimals = number - integer
    return decimals


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    return number - int(number)


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimals = number - integer
    return decimals


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimal = number - integer
    return decimal


ProblemHumanEval/2: passed
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    integer = int(number)
    decimal = number - integer
    return decimal


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    balance = 0
    for operation in operations:
        if operation < 0:
            balance += operation
        else:
            balance -= operation
        if balance < 0:
            return True
    return False


ProblemHumanEval/3: passed
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    for op in operations:
        if op < 0:
            return True
    return False


ProblemHumanEval/3: passed
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    balance = 0
    for op in operations:
        if op > 0:
            balance += op
        else:
            balance -= op
        if balance < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    for op in operations:
        if op < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    for op in operations:
        if op < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    for op in operations:
        if op < 0:
            return True
    return False


ProblemHumanEval/3: passed
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False


ProblemHumanEval/3: failed: 
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
    for op in operations:
        if op < 0:
            return True
    return False


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(n - mean) for n in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(n - mean) for n in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(n - mean) for n in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(num - mean) for num in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(num - mean) for num in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(num - mean) for num in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(num - mean) for num in numbers) / len(numbers)


ProblemHumanEval/4: passed
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)


ProblemHumanEval/5: passed
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        result.append(delimeter)
    result.append(numbers[-1])
    return result


ProblemHumanEval/5: failed: list index out of range
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    result = []
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        result.append(delimeter)
    result.append(numbers[-1])
    return result


ProblemHumanEval/5: failed: list index out of range
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    return [numbers[0]] + [delimeter] + numbers + [delimeter]


ProblemHumanEval/5: failed: list index out of range
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    result = []
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        result.append(delimeter)
    result.append(numbers[-1])
    return result


ProblemHumanEval/5: failed: 
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    current = numbers[0]
    for i in range(1, len(numbers)):
        if i % 2 == 0:
            result.append(current)
        current = numbers[i]
        result.append(delimeter)
    result.append(current)
    return result


ProblemHumanEval/5: passed
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        result.append(delimeter)
    result.append(numbers[-1])
    return result


ProblemHumanEval/5: passed
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    for i in range(len(numbers)):
        result.append(numbers[i])
        if i + 1 < len(numbers):
            result.append(delimeter)
    return result


ProblemHumanEval/5: passed
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    result = []
    for i in range(len(numbers)):
        if i != 0:
            result.append(delimeter)
        result.append(numbers[i])
    return result


ProblemHumanEval/5: failed: list index out of range
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    return [numbers[0]] + [delimeter] + numbers[1:] + [delimeter]


ProblemHumanEval/5: passed
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    for i in range(len(numbers)):
        result.append(numbers[i])
        if i + 1 < len(numbers):
            result.append(delimeter)
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    level = 0


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    stack = []
    result = []
    for c in paren_string:
        if c == '(':
            stack.append(0)
        else:
            if stack:
                stack[-1] += 1
            else:
                result.append(0)
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    stack = []
    result = []


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    current_level = 0
    for c in paren_string:
        if c == '(':
            current_level += 1
        elif c == ')':
            current_level -= 1
        result.append(current_level)
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    current_level = 0
    for c in paren_string:
        if c == '(':
            current_level += 1
        elif c == ')':
            current_level -= 1
        result.append(current_level)
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    stack = []
    result = []


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    stack = []
    result = []
    for c in paren_string:
        if c == '(':
            stack.append(0)
        else:
            stack[-1] += 1
            if stack[-1] == 1:
                result.append(0)
            else:
                result[-1] += 1
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    current_level = 0
    open_parens = 0


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    depth = 0
    for c in paren_string:
        if c == '(':
            depth += 1
        elif c == ')':
            depth -= 1
        result.append(depth)
    return result


ProblemHumanEval/6: failed: 
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    result = []
    stack = []
    current_level = 0


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [string for string in strings if substring in string]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [s for s in strings if substring in s]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [string for string in strings if substring in string]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [string for string in strings if substring in string]


ProblemHumanEval/7: passed
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [string for string in strings if substring in string]


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return (sum_, product)


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return (sum_, product)


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return (sum_, product)


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return (sum_, product)


ProblemHumanEval/8: passed
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
    sum_ = 0
    product = 1
    for num in numbers:
        sum_ += num
        product *= num
    return sum_, product


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_list = [numbers[0]]
    for number in numbers[1:]:
        if number > max_list[-1]:
            max_list.append(number)
        else:
            max_list.pop(0)
            max_list.append(number)
    return max_list


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_list = [numbers[0]]
    for n in numbers[1:]:
        max_list.append(max(max_list[-1], n))
    return max_list


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_list = []
    for num in numbers:
        max_list.append(max(max_list[-1], num))
    return max_list


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_so_far = numbers[0]
    result = [max_so_far]
    for num in numbers[1:]:
        max_so_far = max(num, max_so_far)
        result.append(max_so_far)
    return result


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    result = []
    max_element = numbers[0]
    for num in numbers:
        if num > max_element:
            max_element = num
        result.append(max_element)
    return result


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_so_far = numbers[0]
    result = [max_so_far]
    for num in numbers[1:]:
        max_so_far = max(num, max_so_far)
        result.append(max_so_far)
    return result


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_so_far = numbers[0]
    result = [max_so_far]
    for i in range(1, len(numbers)):
        if numbers[i] > max_so_far:
            max_so_far = numbers[i]
        result.append(max_so_far)
    return result


ProblemHumanEval/9: failed: 
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    result = []
    for i in range(len(numbers)):
        max_so_far = max(result, default=numbers[i])
        result.append(max_so_far)
    return result


ProblemHumanEval/9: failed: list index out of range
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_list = [numbers[0]]
    for number in numbers[1:]:
        max_list.append(max(max_list[-1], number))
    return max_list


ProblemHumanEval/9: failed: 
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    max_list = []
    for i in range(len(numbers)):
        max_list.append(max(numbers[i:]))
    return max_list


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if len(string) == 0:
        return string
    prefix = string[:len(string) // 2]
    suffix = string[len(string) // 2:]
    if is_palindrome(prefix):
        return prefix + suffix
    return make_palindrome(suffix)


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    prefix = ''.join(c for c in string if c.isalpha())
    suffix = ''.join(c for c in reversed(string) if c.isalpha())
    return prefix + suffix[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if is_palindrome(string):
        return string
    suffix = ''
    prefix = ''
    for i in range(len(string)):
        suffix = string[i:]
        prefix = string[:i]
        if is_palindrome(suffix):
            break
    return prefix + suffix[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    longest_palindrome = ''
    prefix = ''
    for c in string:
        suffix = longest_palindrome + c
        if is_palindrome(suffix):
            longest_palindrome = suffix
            prefix = c
    return prefix + longest_palindrome[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    prefix = ''
    suffix = ''
    for i in range(len(string) - 1, -1, -1):
        if is_palindrome(string[i:]):
            prefix = string[:i]
            suffix = string[i:]
            break
    return prefix + suffix[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if not is_palindrome(string):
        return string + make_palindrome(string[1:])[::-1]
    return string + string[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if is_palindrome(string):
        return string
    prefix = string[:len(string) // 2]
    suffix = string[len(string) // 2:]
    return prefix + suffix[::-1]


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if not string:
        return ''
    prefix = ''
    suffix = ''
    while not is_palindrome(prefix + string + suffix):
        prefix += string[0]
        suffix = string[-1] + suffix
    return prefix + suffix


ProblemHumanEval/10: failed: 
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    if not is_palindrome(string):
        return string + string[::-1]
    return string + string[:len(string) // 2]


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError("Input strings must have the same length.")
    return "".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError("a and b must be of equal length")
    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError('a and b must have the same length')
    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/11: passed
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    result = []
    for i in range(len(a)):
        result.append(str(int(a[i]) ^ int(b[i])))
    return ''.join(result)


ProblemHumanEval/11: passed
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError("a and b must be of equal length")
    return "".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    result = []
    for i in range(len(a)):
        result.append(chr(ord(a[i]) ^ ord(b[i])))
    return ''.join(result)


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    result = []
    for i in range(len(a)):
        result.append(chr(ord(a[i]) ^ ord(b[i])))
    return ''.join(result)


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/11: failed: 
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError("Input strings must have the same length")
    return "".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))


ProblemHumanEval/12: failed: 
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None


ProblemHumanEval/12: passed
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None
    max_length = 0
    longest = None
    for string in strings:
        if len(string) > max_length:
            max_length = len(string)
            longest = string
    return longest


ProblemHumanEval/12: passed
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None
    max_len = 0
    longest = None
    for s in strings:
        if len(s) > max_len:
            max_len = len(s)
            longest = s
    return longest


ProblemHumanEval/12: failed: 
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None


ProblemHumanEval/12: passed
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None
    max_length = 0
    longest = strings[0]
    for string in strings:
        if len(string) > max_length:
            max_length = len(string)
            longest = string
    return longest


ProblemHumanEval/12: passed
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None
    longest = strings[0]
    for s in strings[1:]:
        if len(s) > len(longest):
            longest = s
    return longest


ProblemHumanEval/12: failed: 
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None


ProblemHumanEval/12: passed
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None
    max_length = 0
    longest = None
    for s in strings:
        if len(s) > max_length:
            max_length = len(s)
            longest = s
    return longest


ProblemHumanEval/12: failed: 
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None


ProblemHumanEval/12: failed: 
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
    if not strings:
        return None


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if a < b:
        a, b = b, a
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if a % b == 0:
        return b
    return greatest_common_divisor(b, a % b)


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if a == 0:
        return b
    if b == 0:
        return a
    if a > b:
        return greatest_common_divisor(a - b, b)
    return greatest_common_divisor(b - a, a)


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if a < b:
        a, b = b, a
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if b == 0:
        return a
    return greatest_common_divisor(b, a % b)


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    if b == 0:
        return a
    return greatest_common_divisor(b, a % b)


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/13: passed
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    while b:
        a, b = b, a % b
    return a


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    prefixes = []
    for i in range(len(string)):
        prefixes.append(string[:i+1])
    return prefixes


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    return [string[:i+1] for i in range(len(string))]


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    return [string[:i + 1] for i in range(len(string))]


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    prefixes = []
    for i in range(len(string)):
        prefixes.append(string[:i+1])
    return prefixes


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    prefixes = []
    for i in range(len(string)):
        prefixes.append(string[:i+1])
    return prefixes


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    prefixes = []
    for i in range(len(string)):
        prefixes.append(string[:i + 1])
    return prefixes


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    result = []
    for i in range(len(string)):
        result.append(string[:i+1])
    return result


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    return [string[:i+1] for i in range(len(string))]


ProblemHumanEval/14: passed
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    result = []
    for i in range(len(string)):
        result.append(string[:i+1])
    return result


ProblemHumanEval/14: failed: 
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    return [string[:i] for i in range(len(string) + 1)]


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/15: failed: 
def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
    return ' '.join(str(i) for i in range(n))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/16: failed: 
def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
    return len(set(string))


ProblemHumanEval/17: failed: invalid literal for int() with base 10: 'o'
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(c) for c in music_string]


ProblemHumanEval/17: failed: invalid literal for int() with base 10: 'o'
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(c) for c in music_string]


ProblemHumanEval/17: failed: invalid literal for int() with base 10: ''
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(note[:-1]) for note in music_string.split()]


ProblemHumanEval/17: failed: Invalid character:  
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    result = []
    current_beat = 0
    
    for c in music_string:
        if c == 'o':
            result.append(current_beat)
            current_beat += 4
        elif c == 'o|':
            result.append(current_beat)
            current_beat += 2
        elif c == '.|':
            result.append(current_beat)
            current_beat += 1
        else:
            raise ValueError('Invalid character: {}'.format(c))
    
    return result


ProblemHumanEval/17: failed: 
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    result = []
    current_beats = 0
    for c in music_string:
        if c == 'o':
            current_beats += 4
        elif c == 'o|':
            current_beats += 2
        elif c == '.|':
            current_beats += 1
        result.append(current_beats)
    return result


ProblemHumanEval/17: failed: invalid literal for int() with base 10: 'o'
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(c) for c in music_string]


ProblemHumanEval/17: failed: 
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    result = []
    current_note = 0
    current_beat = 0
    for c in music_string:
        if c == 'o':
            result.append(current_beat)
            current_beat += 4
        elif c == 'o|':
            result.append(current_beat)
            current_beat += 2
        elif c == '.':
            result.append(current_beat)
            current_beat += 1
    return result


ProblemHumanEval/17: failed: invalid literal for int() with base 10: 'o'
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(c) for c in music_string]


ProblemHumanEval/17: failed: invalid literal for int() with base 10: 'o'
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    return [int(c) for c in music_string]


ProblemHumanEval/17: failed: 
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    result = []
    current_note = 0
    current_beat = 0
    for c in music_string:
        if c == 'o':
            current_beat += 1
        elif c == 'o|':
            current_note += current_beat
            current_beat = 0
        elif c == '.|':
            current_note += current_beat + 1
            current_beat = 0
    return result


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    count = 0
    while string.find(substring) != -1:
        count += 1
        string = string.replace(substring, '', 1)
    return count


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    count = 0
    while string.find(substring) != -1:
        count += 1
        string = string.replace(substring, '', 1)
    return count


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/18: passed
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    count = 0
    index = 0
    while index < len(string):
        if string[index:index + len(substring)] == substring:
            count += 1
        index += 1
    return count


ProblemHumanEval/18: failed: 
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
    return string.count(substring)


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    return ' '.join(sorted(numbers.split()))


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    return ' '.join(sorted(numbers.split()))


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    return ' '.join(sorted(numbers.split()))


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    sorted_numbers = []
    for num in numbers.split():
        if num == "zero":
            sorted_numbers.append(num)
        elif num == "one":
            sorted_numbers.append(num)
        elif num == "two":
            sorted_numbers.append(num)
        elif num == "three":
            sorted_numbers.append(num)
        elif num == "four":
            sorted_numbers.append(num)
        elif num == "five":
            sorted_numbers.append(num)
        elif num == "six":
            sorted_numbers.append(num)
        elif num == "seven":
            sorted_numbers.append(num)
        elif num == "eight":
            sorted_numbers.append(num)
        elif num == "nine":
            sorted_numbers.append(num)
        else:
            sorted_numbers.append(num)
    return " ".join(sorted_numbers)


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    sorted_numbers = sorted(numbers.split())
    return " ".join(sorted_numbers)


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    num_list = numbers.split(' ')
    num_list.sort()
    return ' '.join(num_list)


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    return ' '.join(sorted(numbers.split()))


ProblemHumanEval/19: failed: invalid literal for int() with base 10: 'three'
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    sorted_numbers = [int(n) for n in numbers.split()]
    sorted_numbers.sort()
    return ' '.join(str(n) for n in sorted_numbers)


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    return ' '.join(sorted(numbers.split()))


ProblemHumanEval/19: failed: 
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    num_list = numbers.split(' ')
    num_list.sort()
    return ' '.join(num_list)


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("Must have at least two numbers")
    
    smallest_diff = float("inf")
    closest_1 = None
    closest_2 = None
    
    for i in range(len(numbers) - 1):
        for j in range(i + 1, len(numbers)):
            diff = abs(numbers[i] - numbers[j])
            if diff < smallest_diff:
                smallest_diff = diff
                closest_1 = numbers[i]
                closest_2 = numbers[j]
    
    return (closest_1, closest_2)


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("List must have at least two elements")
    closest = numbers[0], numbers[0]
    for num in numbers[1:]:
        if abs(num - closest[0]) < abs(num - closest[1]):
            closest = (closest[1], num)
        elif abs(num - closest[1]) < abs(num - closest[0]):
            closest = (closest[0], num)
    return closest


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("Need at least two numbers")
    smallest = min(numbers)
    largest = max(numbers)
    return (smallest, largest) if smallest < largest else (largest, smallest)


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("Input list must have at least two elements")


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("Number of elements must be at least 2")
    
    min_diff = float('inf')
    closest_1 = numbers[0]
    closest_2 = numbers[0]
    
    for i in range(1, len(numbers)):
        diff = abs(numbers[i] - numbers[0])
        if diff < min_diff:
            min_diff = diff
            closest_1 = numbers[i]
            closest_2 = numbers[0]
        elif diff == min_diff:
            if numbers[i] < closest_1:
                closest_1 = numbers[i]
            elif numbers[i] > closest_2:
                closest_2 = numbers[i]
    
    return closest_1, closest_2


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("At least two numbers required")


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("The list must contain at least two elements")


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("The list must have at least two elements")


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("Must have at least two elements")


ProblemHumanEval/20: failed: 
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    if len(numbers) < 2:
        raise ValueError("List must have at least two elements")


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    if min_val == max_val:
        return [0.0]
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    if min_val == max_val:
        return numbers
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    if min_val == max_val:
        return [0.0]
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    if min_val == max_val:
        return [0.0]
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    if min_val == max_val:
        return numbers
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    return [(num - min_val) / (max_val - min_val) for num in numbers]


ProblemHumanEval/21: passed
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(v) for v in values if isinstance(v, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(x) for x in values if isinstance(x, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(x) for x in values if isinstance(x, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(val) for val in values if isinstance(val, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(v) for v in values if isinstance(v, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(v) for v in values if isinstance(v, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(val) for val in values if isinstance(val, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(x) for x in values if isinstance(x, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(v) for v in values if isinstance(v, int)]


ProblemHumanEval/22: passed
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    return [int(x) for x in values if isinstance(x, int)]


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/23: passed
def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
    return len(string)


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    if n % 2 == 0:
        return n // 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return i
        i += 2
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    if n % 2 == 0:
        return n // 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return i
        i += 2
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    if n % 2 == 0:
        return n // 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return i
        i += 2
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    if n % 2 == 0:
        return n // 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return i
        i += 2
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    if n % 2 == 0:
        return n // 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return i
        i += 2
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/24: failed: 
def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            result.append(i)
            n //= i
            if i * i != n:
                result.append(n)
                break
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/25: failed: 
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    result = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            result.append(i)
            if count > 1:
                result.append(count)
        i += 1
    if n > 1:
        result.append(n)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = []
    for num in numbers:
        if num not in result:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    result = []
    for num in numbers:
        if num not in result:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    result = []
    for num in numbers:
        if num not in result:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = [numbers[0]]
    for num in numbers[1:]:
        if num != result[-1]:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = [numbers[0]]
    for num in numbers[1:]:
        if num != result[-1]:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = []
    for num in numbers:
        if num not in result:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    result = []
    for num in numbers:
        if num not in result:
            result.append(num)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = []
    for number in numbers:
        if number not in result:
            result.append(number)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = []
    current_value = numbers[0]
    for value in numbers:
        if value != current_value:
            result.append(current_value)
            current_value = value
    result.append(current_value)
    return result


ProblemHumanEval/26: failed: 
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
    if not numbers:
        return []
    result = [numbers[0]]
    for num in numbers[1:]:
        if num != result[-1]:
            result.append(num)
    return result


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/27: passed
def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
    return string.swapcase()


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/28: passed
from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
    return ''.join(strings)


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [string for string in strings if string.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [string for string in strings if string.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [string for string in strings if string.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/29: passed
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [s for s in strings if s.startswith(prefix)]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/30: passed
def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
    return [x for x in l if x > 0]


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/31: passed
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 == 0:
        return -poly(xs, xs[n // 2]) / (2 * xs[n // 2 - 1])
    return -poly(xs, xs[n // 2]) / xs[n // 2]


ProblemHumanEval/32: failed: list index out of range
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 != 0:
        return None
    x1 = xs[0]
    x2 = xs[1]
    if x1 == 0:
        return x2 / xs[2]
    if x2 == 0:
        return -x1 / xs[2]
    return (x2 - x1) / (2 * xs[2])


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 == 0:
        return -poly(xs, xs[n // 2]) / (2 * xs[n // 2 - 1])
    else:
        return -poly(xs, xs[n // 2]) / xs[n // 2]


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 != 0:
        return None
    x1 = xs[n // 2]
    x2 = xs[n // 2 - 1]
    return (x1 - x2) / (2 * (x1 + x2))


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 != 0:
        raise ValueError("xs must have even number of coefficients")
    if xs[0] == 0:
        return 0
    if xs[0] > 0:
        return -poly(xs[1:], -xs[0] / xs[1])
    else:
        return poly(xs[1:], xs[0] / xs[1])


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 == 0:
        return (poly(xs, xs[n // 2]) - poly(xs, 0)) / (xs[n // 2] - xs[0])
    return (poly(xs, xs[n // 2]) - poly(xs, 0)) / (xs[n // 2] - xs[0]) + (poly(xs, xs[n // 2 + 1]) - poly(xs, 0)) / (xs[n // 2 + 1] - xs[0])


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    if len(xs) % 2 != 0:
        raise ValueError('xs must have even number of coefficients')
    if xs[0] == 0:
        return 0
    if xs[1] == 0:
        return 1
    if xs[1] > 0:
        return -poly(xs, -1) / xs[1]
    return -poly(xs, 1) / xs[1]


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 == 0:
        return -poly(xs, xs[n // 2]) / (2 * xs[n // 2])
    else:
        return -poly(xs, xs[n // 2]) / xs[n // 2]


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    if len(xs) % 2 != 0:
        raise ValueError('xs must have even number of coefficients')
    if xs[0] == 0:
        return 0
    if xs[0] > 0:
        return -poly(xs, -xs[0]) / xs[0]
    return poly(xs, xs[0]) / xs[0]


ProblemHumanEval/32: failed: 
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    n = len(xs)
    if n % 2 == 0:
        return -poly(xs, xs[n // 2]) / (2 * xs[n // 2])
    else:
        return -poly(xs, xs[n // 2]) / xs[n // 2]


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l_sorted = []
    for i in range(len(l)):
        if i % 3 == 0:
            l_sorted.append(l[i])
    return l_sorted


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    result = []
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(l[i])
    return result


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    result = []
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(l[i])
    return result


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l_sorted = sorted(l)
    return [l_sorted[i] if i % 3 == 0 else l_sorted[i] for i in range(len(l))]


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l.sort()
    return l


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    result = []
    for i in range(len(l)):
        if i % 3 != 0:
            result.append(l[i])
    return result


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l.sort()
    return l


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l_sorted = sorted(l)
    return [l_sorted[i] if i % 3 == 0 else l[i] for i in range(len(l))]


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l.sort()
    return l


ProblemHumanEval/33: failed: 
def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
    l_sorted = []
    for i in range(len(l)):
        if i % 3 != 0:
            l_sorted.append(l[i])
    return l_sorted


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/34: passed
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    return sorted(set(l))


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/35: passed
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
    return max(l)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or (i % 3 == 0 and i % 5 == 0))


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or (i % 3 == 0 and i % 5 == 0))


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 7 == 0 or i % 11 == 0)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 7 == 0 or i % 13 == 0)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or i % 5 == 0)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or (i % 3 == 0 and i % 5 == 0))


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or i % 5 == 0)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 7 == 0 or i % 13 == 0)


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 15 == 0 or (i % 3 == 0 and i % 5 == 0))


ProblemHumanEval/36: failed: 
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    return sum(1 for i in range(1, n + 1) if i % 7 == 0 or i % 11 == 0)


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    return [l[i] for i in range(0, len(l), 2)]


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    return [l[i] for i in range(0, len(l), 2)]


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    l_sorted = []
    for i in range(0, len(l), 2):
        l_sorted.append(l[i])
    l_sorted.extend(sorted(l[::2]))
    return l_sorted


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    return [l[i] for i in range(0, len(l), 2)]


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    l_sorted = []
    for x in l:
        if x % 2 == 0:
            l_sorted.append(x)
    l_sorted.extend(sorted(l[::2]))
    return l_sorted


ProblemHumanEval/37: failed: list index out of range
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    l_even = l[::2]
    l_odd = l[1::2]
    l_sorted = []
    for i in range(len(l_even)):
        l_sorted.append(l_even[i])
        l_sorted.append(l_odd[i])
    return l_sorted


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    return [l[i] for i in range(0, len(l), 2)]


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    l_sorted = sorted(l)
    return l_sorted + l_sorted


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    return [l[i] for i in range(0, len(l), 2)]


ProblemHumanEval/37: failed: 
def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    l_even = []
    l_odd = []
    for x in l:
        if x % 2 == 0:
            l_even.append(x)
        else:
            l_odd.append(x)
    return l_even + l_odd


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(group for group in groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[i:i + 3] for i in range(0, len(s), 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(group for group in groups)


ProblemHumanEval/10: timed out
def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
    suffix = ''
    while not is_palindrome(string + suffix):
        suffix = string[-1:]
    return string + suffix[::-1]


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[i:i + 3] for i in range(0, len(s), 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    return "".join(groups)


ProblemHumanEval/38: failed: 
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    groups = [s[i:i + 3] for i in range(0, len(s), 3)]
    return "".join(groups)


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n <= 1:
        return n
    a, b = 2, 3
    while True:
        if b >= n:
            return b
        if is_prime(b):
            return b
        a, b = b, a + b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n == 1:
        return 2
    if n == 2:
        return 3
    a, b = 1, 1
    while n > 2:
        a, b = b, a + b
        if b % 2 == 0:
            n -= 1
    return b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n < 2:
        return n
    a, b = 2, 3
    while n > 1:
        if b % 2 == 0:
            n -= 1
            b += a
        else:
            a, b = b, a + b
    return b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n <= 1:
        return n
    a, b = 1, 1
    while n > 2:
        a, b = b, a + b
        if b % 2 == 0:
            n -= 1
    return b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n == 1:
        return 2
    if n == 2:
        return 3
    a, b = 2, 3
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n < 2:
        return n
    a, b = 1, 1
    for i in range(2, n):
        a, b = b, a + b
        if b % 2 == 0:
            if b > 2**31 - 1:
                return -1
            if b < 2**31:
                return b
    return -1


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n <= 1:
        return n
    a, b = 1, 1
    while n > 2:
        a, b = b, a + b
        if b % 2 == 0:
            n -= 1
    return b


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n < 2:
        return n
    a, b = 1, 1
    while b < n:
        a, b = b, a + b
    return b if n % b == 0 else -1


ProblemHumanEval/39: failed: name 'is_prime' is not defined
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n == 1:
        return 2
    if n == 2:
        return 3
    a, b = 2, 3
    for i in range(3, n + 1):
        a, b = b, a + b
        if is_prime(b):
            return b
    return -1


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    counts = {}
    for x in l:
        counts[x] = counts.get(x, 0) + 1


ProblemHumanEval/39: failed: 
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    if n == 1:
        return 2
    if n == 2:
        return 3
    a, b = 2, 3
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    counts = {}
    for x in l:
        if x in counts:
            counts[x] += 1
        else:
            counts[x] = 1
    
    for x in counts:
        if x * 3 in counts and counts[x * 3] > 0:
            return True
    
    return False


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    count = {}
    for num in l:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    counts = {}
    for x in l:
        if x in counts:
            counts[x] += 1
        else:
            counts[x] = 1
    
    for x in counts:
        if x * 3 in counts and counts[x * 3] > 0:
            return True
    
    return False


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    sum_to_zero = 0
    count = 0
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                sum = l[i] + l[j] + l[k]
                if sum == 0:
                    count += 1
    return count == 3


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    count = {}
    for num in l:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    
    for num in l:
        complement = 0 - num
        if complement in count:
            if count[complement] > 0:
                return True
            count[complement] -= 1
    return False


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    sums = {}
    for num in l:
        if num in sums:
            return True
        sums[num] = 1
    return False


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    sum_to_zero = set()
    for i in l:
        for j in l:
            for k in l:
                if i + j + k == 0 and i != j != k != i:
                    sum_to_zero.add(i)
                    sum_to_zero.add(j)
                    sum_to_zero.add(k)
    return len(sum_to_zero) == 3


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    count = {}
    for num in l:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    
    for num in l:
        complement = -num
        if complement in count and count[complement] > 0:
            if count[complement] == 1:
                del count[complement]
            else:
                count[complement] -= 1
            return True
    
    return False


ProblemHumanEval/40: failed: 
def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
    counts = {}
    for x in l:
        counts[x] = counts.get(x, 0) + 1
    for x in l:
        if counts.get(-x, 0) >= 2:
            return True
    return False


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (i + j) % 2 == 0:
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(i+1, n):
            if (i % 2 == 0 and j % 2 == 1) or (i % 2 == 1 and j % 2 == 0):
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(n):
            if i != j and (i - j < n // 2 or i + j > n - 1):
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (i + j) % 2 == 0:
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (i + j) % 2 == 0:
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(i+1, n):
            if (i // 2 < j // 2) and (i % 2 == j % 2):
                collisions += 1
    return collisions


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    left_cars = [0] * n
    right_cars = [0] * n


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(n):
            if i != j and (i // 2 == j // 2 or (i + j) % 2 == 0):
                collisions += 1
    return collisions


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/41: failed: 
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    for i in range(n):
        for j in range(n):
            if i != j and (i // 2 == j // 2 or i % 2 == j % 2):
                collisions += 1
    return collisions


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [i + 1 for i in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [i + 1 for i in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [i + 1 for i in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [x + 1 for x in l]


ProblemHumanEval/42: passed
def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
    return [i + 1 for i in l]


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sum_to_zero = 0
    count = 0
    for i in l:
        if i > 0:
            sum_to_zero += i
            count += 1
    if count == 0:
        return False
    if count == 1:
        return sum_to_zero == 0
    return sum_to_zero % 2 == 0


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    return len(set(l)) == 2


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sum_to_zero = 0
    count = 0
    for i in l:
        if i < 0:
            sum_to_zero += i
            count += 1
    return count == 2 and sum_to_zero == 0


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sums = {}
    for num in l:
        if num in sums:
            return True
        else:
            sums[num] = 1
    return False


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sum_to_zero = 0
    count = 0
    for i in l:
        if i > 0:
            sum_to_zero += i
            count += 1
        elif i < 0:
            sum_to_zero -= i
            count += 1
        else:
            continue
        if count > 2:
            return True
    return False


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sums = {}
    for num in l:
        if num in sums:
            sums[num] += 1
        else:
            sums[num] = 1
    for num in l:
        if num in sums and sums[num] == 2:
            return True
    return False


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sum_to_zero_count = 0
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if l[i] + l[j] == 0:
                sum_to_zero_count += 1
    return sum_to_zero_count == 2


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sum_to_zero_count = 0
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            if l[i] + l[j] == 0:
                sum_to_zero_count += 1
    return sum_to_zero_count == 2


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sums = {}
    for n in l:
        if n in sums:
            sums[n] += 1
        else:
            sums[n] = 1
    for n in l:
        if n * 2 in sums and sums[n * 2] > 0:
            return True
    return False


ProblemHumanEval/43: failed: 
def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
    sums = {}
    for num in l:
        if num in sums:
            sums[num] += 1
        else:
            sums[num] = 1
    for key in sums:
        if key in sums and sums[key] == 2:
            return True
    return False


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    if base < 2 or base > 10:
        return ""
    result = ""
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    if base < 2 or base > 16:
        raise ValueError("Base must be between 2 and 16")
    if x < 0:
        x = -x
        sign = 1
    else:
        sign = 0
    result = ""
    while x:
        result = str(x % base) + result
        x //= base
    if sign:
        result = "-" + result
    return result


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    result = []
    while x:
        result.append(str(x % base))
        x //= base
    return ''.join(result[::-1])


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    if base < 2:
        raise ValueError("Base must be greater than 1.")
    if x == 0:
        return '0'
    result = ''
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result


ProblemHumanEval/44: failed: 
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    if base > 9:
        return change_base(x, base % 10) + change_base(x // 10, base)
    return str(x % base)


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    result = []
    while x:
        result.append(str(x % base))
        x //= base
    return ''.join(result[::-1])


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    if base < 2:
        raise ValueError("base must be greater than 1")
    if x < 0:
        x = -x
        sign = "-"
    else:
        sign = ""
    result = ""
    while x:
        result = str(x % base) + result
        x //= base
    return sign + result


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    result = []
    while x:
        result.append(str(x % base))
        x //= base
    return ''.join(result[::-1])


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    result = []
    while x:
        result.append(str(x % base))
        x //= base
    return ''.join(result[::-1])


ProblemHumanEval/44: passed
def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
    result = []
    while x:
        result.append(str(x % base))
        x //= base
    return ''.join(result[::-1])


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return a * h / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return a * h / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return (a * h) / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return a * h / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return (a * h) / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return (a * h) / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return a * h / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return (a * h) / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return (a * h) / 2


ProblemHumanEval/45: passed
def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
    return a * h / 2


ProblemHumanEval/46: passed
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n <= 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return a + b


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n <= 2:
        return n
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n <= 2:
        return n
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n < 2:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n < 0:
        raise ValueError('n must be non-negative')
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    a, b = 0, 1
    for i in range(4, n+1):
        a, b = b, a + b
    return a


ProblemHumanEval/46: passed
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/46: passed
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n < 0:
        return None
    if n == 0:
        return 0
    if n == 1:
        return 0
    a, b = 0, 1
    for i in range(2, n + 1):
        c = a + b
        a = b
        b = c
    return b


ProblemHumanEval/46: failed: 
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    if n <= 2:
        return n - 1
    else:
        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    mid = len(l) // 2
    if len(l) % 2 == 0:
        return (l[mid] + l[mid - 1]) / 2
    return l[mid]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    if len(l) % 2 == 0:
        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2
    return l[len(l) // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    n = len(l)
    if n % 2 == 0:
        return (l[n // 2 - 1] + l[n // 2]) / 2
    else:
        return l[n // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    mid = len(l) // 2
    if len(l) % 2 == 0:
        return (l[mid] + l[mid - 1]) / 2
    else:
        return l[mid]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    n = len(l)
    if n % 2 == 0:
        return (l[n // 2] + l[n // 2 - 1]) / 2
    return l[n // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    if len(l) % 2 == 0:
        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2
    return l[len(l) // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    mid = len(l) // 2
    if len(l) % 2 == 0:
        return (l[mid] + l[mid - 1]) / 2
    else:
        return l[mid]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    n = len(l)
    if n % 2 == 0:
        return (l[n // 2] + l[n // 2 - 1]) / 2
    else:
        return l[n // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    if len(l) % 2 == 0:
        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2
    return l[len(l) // 2]


ProblemHumanEval/47: passed
def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
    l.sort()
    if len(l) % 2 == 0:
        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2
    else:
        return l[len(l) // 2]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/48: passed
def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
    return text == text[::-1]


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/49: failed: 
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return (n % p + p) % p


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: failed: 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 + 26) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: failed: 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 + 26) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: failed: 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 + 26) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/50: passed
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
    return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = ['a', 'e', 'i', 'o', 'u']
    return ''.join([c for c in text if c not in vowels])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = 'aeiou'
    return ''.join([c for c in text if c not in vowels])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = ['a', 'e', 'i', 'o', 'u']
    return ''.join([c for c in text if c not in vowels])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = "aeiou"
    return ''.join([c for c in text if c not in vowels])


ProblemHumanEval/51: passed
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    return ''.join([c for c in text if c not in 'aeiouAEIOU'])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = "aeiou"
    return "".join([c for c in text if c not in vowels])


ProblemHumanEval/51: passed
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    return ''.join([c for c in text if c not in 'aeiouAEIOU'])


ProblemHumanEval/51: passed
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    return ''.join([c for c in text if c not in 'aeiouAEIOU'])


ProblemHumanEval/51: failed: 
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    vowels = ['a', 'e', 'i', 'o', 'u']
    return ''.join([c for c in text if c not in vowels])


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/51: passed
def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
    return ''.join([c for c in text if c not in 'aeiouAEIOU'])


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/52: passed
def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
    return all(n < t for n in l)


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/53: passed
def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
    return x + y


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/54: passed
def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
    return set(s0) == set(s1)


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/55: failed: 
def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(n - 2):
        a, b = b, a + b
    return b


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if stack and stack[-1] == '<':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if stack and stack[-1] == '<':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if not stack or stack[-1] != '<':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if not stack or stack.pop() != '<':
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        else:
            if not stack or stack.pop() != '<':
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if stack and stack[-1] == '<':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        else:
            if not stack or stack[-1] != '<':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        else:
            if not stack or stack.pop() != '<':
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if not stack or stack.pop() != '<':
                return False
    return not stack


ProblemHumanEval/56: failed: 
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    stack = []
    for c in brackets:
        if c == '<':
            stack.append('>')
        elif c == '>':
            if not stack or stack[-1] != '<':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) and all(l[i] >= l[i + 1] for i in range(1, len(l)))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x > y for x, y in zip(l, l[1:])) or all(x < y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x > y for x, y in zip(l, l[1:])) or all(x < y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x < y or x > y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x > y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x > y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x > y for x, y in zip(l, l[1:]))


ProblemHumanEval/57: failed: 
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
    return all(x < y or x > y for x, y in zip(l, l[1:]))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/58: passed
def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
    return sorted(set(l1) & set(l2))


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    if n <= 1:
        return n
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    if n < 2:
        return 1
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    if n <= 1:
        return n
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    if n == 1:
        return 1
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/59: failed: 
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    i = 2
    while i * i <= n:
        if n % i == 0:
            return i
        i += 1
    return n


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/60: passed
def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
    return (n * (n + 1)) // 2


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if stack:
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/61: passed
def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
    stack = []
    for c in brackets:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    return [(xs[i] * xs[i + 1]) for i in range(len(xs) - 1)]


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    return [x * i for i, x in enumerate(xs[1:])]


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    return [i * (xs[i + 1] - xs[i]) for i in range(len(xs) - 1)]


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(len(xs) - 1):
        result.append(xs[i + 1] * xs[i])
    return result


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(1, len(xs)):
        result.append(xs[i] * xs[i - 1])
    return result


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(len(xs) - 1):
        result.append(xs[i + 1] * xs[i])
    return result


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    return [x * i for i, x in enumerate(xs[1:])]


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(len(xs) - 1):
        result.append(xs[i + 1] * xs[i])
    return result


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(1, len(xs)):
        result.append(xs[i] * xs[i - 1])
    return result


ProblemHumanEval/62: failed: 
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    result = []
    for i in range(1, len(xs)):
        result.append(xs[i] * xs[i - 1])
    return result


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    a, b = 0, 1
    for i in range(3, n + 1):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    a, b = 0, 1
    for i in range(3, n+1):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    a, b = 0, 1
    for i in range(3, n+1):
        a, b = b, a + b
    return b


ProblemHumanEval/63: failed: 
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    if n == 0:
        return 0
    if n == 1:
        return 0
    a, b = 0, 1
    for i in range(2, n + 1):
        a, b = b, a + b
    return b


ProblemHumanEval/64: failed: Test 3
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiouAEIOU":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 3
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiouAEIOU":
            count += 1
    return count


ProblemHumanEval/64: failed: Test 2
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
    count = 0
    for c in s:
        if c in "aeiou":
            count += 1
    return count


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    shift %= len(str(x))
    return str(x)[-shift:] + str(x)[:-shift]


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x << shift) | (x >> (32 - shift)))


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x * (10 ** shift) % 1000000007) % 10)


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    digits = list(str(x))
    n = len(digits)
    if shift > n:
        digits.extend(digits[:shift])
    else:
        digits = digits[-shift:] + digits[:-shift]
    return "".join(digits)


ProblemHumanEval/65: failed: object of type 'int' has no len()
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    shift %= len(x)
    return x[-shift:] + x[:-shift]


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x % 10**9 + shift) % 10**9)


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    digits = list(str(x))
    n = len(digits)
    shift = shift % n
    if shift > 0:
        digits.extend(digits[-shift:])
        digits = digits[-n:]
    else:
        digits = digits[shift:] + digits[:-shift]
    return "".join(digits)


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x << shift) | (x >> (32 - shift)))


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x << shift) | (x >> (32 - shift)))


ProblemHumanEval/65: failed: 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    return str((x << shift) | (x >> (32 - shift)))


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/66: failed: Error
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    sum = 0
    for c in s:
        sum += ord(c) - ord('0')
    return sum


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/66: failed: Error
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    sum = 0
    for c in s:
        sum += ord(c) - ord('0')
    return sum


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/66: failed: Error
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    sum = 0
    for c in s:
        sum += ord(c) - ord('0')
    return sum


ProblemHumanEval/66: failed: Error
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    sum = 0
    for c in s:
        sum += ord(c) - ord('0')
    return sum


ProblemHumanEval/67: failed: too many values to unpack (expected 2)
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    apples, oranges = s.split()
    return int(apples) - int(oranges) + n


ProblemHumanEval/66: failed: invalid literal for int() with base 10: 'a'
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(int(c) for c in s)


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    oranges = s.count('o')
    apples = s.count('a')
    mango = n - oranges - apples
    return mango


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    count = 0
    for i in range(len(s)):
        if s[i] == 'a':
            count += 1
            if count > n:
                return -1
    return count


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    apples = oranges = 0
    for i in range(len(s)):
        if s[i] == 'a':
            apples += 1
        elif s[i] == 'o':
            oranges += 1
    return n - apples - oranges


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    oranges = s.count('o')
    apples = s.count('a')
    mango = (oranges + apples) // n
    return mango


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    count_apples = 0
    count_oranges = 0
    count_mango = 0
    
    for i in range(len(s)):
        if s[i] == 'a':
            count_apples += 1
        elif s[i] == 'o':
            count_oranges += 1
        elif s[i] == 'm':
            count_mango += 1
            
    return n - count_apples - count_oranges + count_mango


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    return n - s.count('a') - s.count('o')


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    count = 0
    for i in range(n):
        if s[i] == 'a': count += 1
        elif s[i] == 'o': count += 2
        else: count += 3
    return count


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    oranges = s.count("oranges")
    apples = s.count("apples")
    mango = n - apples - oranges
    return mango


ProblemHumanEval/67: failed: 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
    return n - s.count('a') - s.count('o')


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    smallest = min(arr, key=lambda x: x % 2)
    smallest_index = arr.index(smallest)
    
    return [smallest, smallest_index]


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    min_index = 0
    min_value = arr[0]
    for i, value in enumerate(arr):
        if value % 2 == 0 and value < min_value:
            min_value = value
            min_index = i
    
    return [min_value, min_index]


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    smallest_value = min(arr, key=lambda x: x % 2)
    smallest_index = arr.index(smallest_value)
    
    return [smallest_value, smallest_index]


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    min_index = 0
    min_value = arr[0]
    for i, value in enumerate(arr):
        if value % 2 == 0 and value < min_value:
            min_value = value
            min_index = i
    
    return [min_value, min_index]


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    result = []
    min_value = arr[0]
    min_index = 0
    for i, value in enumerate(arr):
        if value % 2 == 0:
            if value < min_value:
                min_value = value
                min_index = i
        else:
            min_value = value
            min_index = i
    
    return [min_value, min_index]


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    result = []
    min_value = float('inf')
    min_index = -1
    for i, val in enumerate(arr):
        if val % 2 == 0:
            if val < min_value:
                min_value = val
                min_index = i
            elif val == min_value and i < min_index:
                min_index = i
    
    result.append(min_value)
    result.append(min_index)
    return result


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    result = []
    min_value = arr[0]
    min_index = 0
    for i, val in enumerate(arr):
        if val % 2 == 0:
            if val < min_value:
                min_value = val
                min_index = i
            elif val == min_value and i < min_index:
                min_index = i
    
    result.append(min_value)
    result.append(min_index)
    return result


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    result = []
    min_value = arr[0]
    min_index = 0
    for i, val in enumerate(arr):
        if val % 2 == 0 and val < min_value:
            min_value = val
            min_index = i
    
    result.append(min_value)
    result.append(min_index)
    return result


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    result = []
    min_value = float('inf')
    min_index = -1
    for i, val in enumerate(arr):
        if val % 2 == 0:
            if val < min_value:
                min_value = val
                min_index = i
            elif val == min_value and i < min_index:
                min_value = val
                min_index = i
    
    result.append(min_value)
    result.append(min_index)
    return result


ProblemHumanEval/68: failed: Error
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
    if not arr:
        return []
    
    min_val = min(arr, key=lambda x: x % 2)
    index = arr.index(min_val)
    
    return [min_val, index]


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = {}
    for num in lst:
        count[num] = count.get(num, 0) + 1
    
    for num in count:
        if count[num] > count.get(num - 1, 0):
            return num
    
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    
    for key in freq:
        if freq[key] >= key:
            return key
    
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = {}
    for x in lst:
        count[x] = count.get(x, 0) + 1
    
    for x in lst:
        if count[x] >= x:
            return x
    
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    
    for num in freq:
        if freq[num] >= num:
            return num
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = {}
    for num in lst:
        count[num] = count.get(num, 0) + 1
    
    for num in lst:
        if count[num] >= count[num]:
            return num
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = {}
    for num in lst:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    
    for num, freq in count.items():
        if freq >= num:
            return num
    return -1


ProblemHumanEval/41: timed out
def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
    collisions = 0
    while n > 0:
        if n % 2 == 0:
            n //= 2
        else:
            collisions += 1
            n += 1
    return collisions


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    freq = {}
    for i in lst:
        freq[i] = freq.get(i, 0) + 1
    
    for i in lst:
        if freq[i] >= i:
            return i
    
    return -1


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    
    for num in lst:
        if freq[num] >= num:
            return num
    return -1


ProblemHumanEval/69: failed: -1
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    freq = {}
    result = -1
    for num in lst:
        if num not in freq:
            freq[num] = 1
        else:
            freq[num] += 1
        if freq[num] > freq[result]:
            result = num
    return result


ProblemHumanEval/69: failed: 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = {}
    for num in lst:
        count[num] = count.get(num, 0) + 1
    
    for num, freq in count.items():
        if freq >= num:
            return num
    
    return -1


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_value = min(lst)
    max_value = max(lst)
    return [min_value] + lst + [max_value]


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    return [max_val] + lst + [min_val]


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_value = min(lst)
    max_value = max(lst)
    result = []
    for i in range(min_value, max_value + 1):
        result.extend([i] * lst.count(i))
    return result


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_value = min(lst)
    max_value = max(lst)
    result = [min_value]
    for value in lst:
        if value > min_value:
            result.append(max_value)
            max_value -= 1
        else:
            result.append(value)
    return result + [max_value]


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_value = min(lst)
    max_value = max(lst)
    result = []
    for i in range(min_value, max_value + 1):
        result.extend([i] * lst.count(i))
    return result


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    return [min_val] + lst + [max_val]


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    result = []
    for i in range(min_val, max_val + 1):
        result.append(i)
    return result


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    result = []
    for i in range(min_val, max_val + 1):
        result.append(i)
    return result


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_value = min(lst)
    max_value = max(lst)
    return [max_value] + [min_value] + lst + [min_value]


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/70: failed: 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    result = [min_val]
    for num in lst:
        if num <= min_val:
            result.append(num)
        else:
            result.append(max_val)
            max_val -= 1
    return result


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/71: failed: type complex doesn't define __round__ method
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)


ProblemHumanEval/72: passed
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return q == q[::-1] and sum(q) <= w


ProblemHumanEval/72: failed: object of type 'int' has no len()
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    if len(q) > len(w):
        return False
    
    if q == w:
        return True
    
    sum_q = sum(q)
    sum_w = sum(w)
    
    return sum_q <= sum_w


ProblemHumanEval/72: failed: object of type 'int' has no len()
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    if len(q) < len(w): return False
    if len(q) == len(w): return sum(q) <= w
    return True


ProblemHumanEval/72: failed: '>' not supported between instances of 'list' and 'int'
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    if q == w:
        return True
    if q > w:
        return False
    if q < w:
        return will_it_fly(q + 1, w - q)
    return False


ProblemHumanEval/72: failed: object of type 'int' has no len()
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return q == w or (len(q) == len(w) and q == list(w) and sum(q) <= w)


ProblemHumanEval/72: failed: 'list' object has no attribute 'balanced'
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return q.balanced() and sum(q) <= w


ProblemHumanEval/72: failed: name 'is_balanced' is not defined
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return (is_balanced(q) and sum(q) <= w)


ProblemHumanEval/72: failed: 
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    if len(q) == 1:
        return w > q[0]
    return w > q[0] + will_it_fly(q[1:], w - q[0])


ProblemHumanEval/72: passed
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return (q == q[::-1]) and sum(q) <= w


ProblemHumanEval/72: failed: name 'is_balanced' is not defined
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
    return (is_balanced(q) and sum(q) <= w)


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_change = n + 1
    for i in range(n):
        current_min = n + 1
        for j in range(i, n):
            current_min = min(current_min, abs(arr[i] - arr[j]))
        min_change = min(min_change, current_min)
    return min_change


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_change = n
    for i in range(n):
        left = arr[i]
        for j in range(i + 1, n):
            right = arr[j]
            change = abs(left - right)
            min_change = min(min_change, change)
    return min_change


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_change = n + 1
    for i in range(n):
        for j in range(i + 1, n):
            change = abs(arr[i] - arr[j])
            if change < min_change:
                min_change = change
    return min_change


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    for i in range(n):
        for j in range(i + 1, n):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    for i in range(n):
        for j in range(n):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    
    for i in range(n):
        diff = abs(arr[i] - arr[n - 1 - i])
        min_diff = min(min_diff, diff)
    
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    for i in range(n):
        for j in range(n):
            diff = abs(arr[i] - arr[j])
            min_diff = min(min_diff, diff)
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    
    for i in range(n):
        diff = abs(arr[i] - arr[n - 1 - i])
        min_diff = min(min_diff, diff)
    
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_diff = float('inf')
    
    for i in range(n):
        for j in range(n):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
                
    return min_diff


ProblemHumanEval/73: failed: 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    n = len(arr)
    min_change = n + 1
    for i in range(n):
        current_min = n + 1
        for j in range(i + 1, n):
            current_min = min(current_min, abs(arr[i] - arr[j]))
        min_change = min(min_change, current_min)
    return min_change


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    if len(lst1) == len(lst2):
        return [s for s in lst1 if len(s) < len(lst2)]
    return lst1


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    if len(lst1) == len(lst2):
        return [item for item in lst1 if len(item) <= len(lst2)]
    return lst1


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total = 0
    for i in range(len(lst1)):
        if len(lst1[i]) < len(lst2[i]):
            total += len(lst1[i])
        else:
            total += len(lst2[i])
    return lst1 if total == 0 else lst2


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total = len(lst1) + len(lst2)
    if total == len(set(lst1)) and total == len(set(lst2)):
        return lst1
    return lst2


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total_match = []
    for s1 in lst1:
        for s2 in lst2:
            if len(s1) < len(s2):
                total_match.append(s1)
            elif len(s1) > len(s2):
                total_match.append(s2)
            else:
                if s1 == s2:
                    total_match.append(s1)
    return total_match


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    return [x for x in lst1 if len(x) < len(lst2)]


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total_match = []
    for i in range(len(lst1)):
        if lst1[i] < lst2[i]:
            total_match.append(lst1[i])
    return total_match


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    if len(lst1) == len(lst2):
        return lst1
    return lst2


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    return [x for x in lst1 if len(x) < len(lst2)]


ProblemHumanEval/74: failed: 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total_match = []
    for i in range(len(lst1)):
        if lst1[i] < lst2[i]:
            total_match.append(lst1[i])
    return total_match


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    if a % 3 == 0:
        return True
    if a % 5 == 0:
        return True
    return False


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    for i in range(2, int(a ** 0.5) + 1):
        if a % i == 0:
            return False
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    if a % 3 == 0 or a % 5 == 0:
        return False
    for i in range(2, int(a ** 0.5) + 1):
        if a % i == 0:
            return False
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    if a % 3 == 0 or a % 5 == 0:
        return True
    i = 6
    while i * i <= a:
        if a % i == 0 or a % (i + 2) == 0:
            return False
        i += 6
    return True


ProblemHumanEval/75: failed: 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    if a < 100:
        return False
    i = 2
    while i * i <= a:
        if a % i == 0:
            return False
        i += 1
    return True


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n ** int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    if n == 0:
        return True
    if n == 1:
        return x == 1
    if n % 2 == 0:
        return is_simple_power(x * x, n // 2)
    return x == 1


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n**int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n ** int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n**int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n ** int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    if n == 0:
        return True
    if x == 1:
        return False
    if n == 1:
        return x == n
    if n % 2 == 0:
        return is_simple_power(x * x, n // 2)
    return False


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n ** int(x) == x


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    if n == 1:
        return x == 1
    return n % 2 == 0 and is_simple_power(x * x, n // 2)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a**0.5 == int(a**0.5)


ProblemHumanEval/76: failed: This prints if this assert fails 1 (good for debugging!)
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
    return n**int(x) == x


ProblemHumanEval/77: failed: Fourth test error: False
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a * a * a == a


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a**0.5 == int(a**0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a**0.5 == int(a**0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a ** 0.5 == int(a ** 0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a ** 0.5 == int(a ** 0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a**0.5 == int(a**0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a ** 0.5 == int(a ** 0.5)


ProblemHumanEval/77: failed: int() argument must be a string, a bytes-like object or a real number, not 'complex'
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a**0.5 == int(a**0.5)


ProblemHumanEval/77: failed: Fourth test error: False
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return a ** 3 == a


ProblemHumanEval/78: failed: First test error: None
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    hex_digits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]
    hex_count = 0
    hex_digits_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];


ProblemHumanEval/78: failed: not all arguments converted during string formatting
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    count = 0
    while num:
        count += num % 2
        num //= 2
    return count


ProblemHumanEval/78: failed: First test error: 2
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    count = 0
    for digit in num:
        if digit in hex_digits:
            count += 1
    return count


ProblemHumanEval/78: failed: invalid syntax. Perhaps you forgot a comma? (<string>, line 20)
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 481, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 697, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809 789, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,


ProblemHumanEval/78: failed: not all arguments converted during string formatting
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    count = 0
    while num:
        count += num % 2
        num //= 2
    return count


ProblemHumanEval/78: failed: not all arguments converted during string formatting
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    result = 0
    while num:
        result += num % 2
        num //= 2
    return result


ProblemHumanEval/78: failed: First test error: -1
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]
    hex_digits = "0123456789ABCDEF"
    key = 0
    
    for digit in num:
        if digit.upper() not in hex_digits:
            return -1
    
    for digit in num:
        if digit.upper() in hex_digits:
            key += hex_digits.index(digit.upper()) * (16 ** (num.index(digit) - 1))
    
    for prime in primes:
        if key % prime == 0:
            return prime
    
    return -1


ProblemHumanEval/78: failed: First test error: 21
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    key = 0
    for digit in num:
        key += hex_digits.index(digit)
    return key


ProblemHumanEval/78: failed: not all arguments converted during string formatting
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    key = 0
    while num:
        key += num % 2
        num //= 2
    return key


ProblemHumanEval/78: failed: not all arguments converted during string formatting
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
    count = 0
    while num:
        count += num % 2
        num //= 2
    return count


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ''
    while decimal > 0:
        result = str(decimal % 2) + result
        decimal //= 2
    return "db" + result + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ''
    while decimal > 0:
        result = str(decimal % 2) + result
        decimal //= 2
    return 'db' + result + 'db'


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ''
    while decimal > 0:
        result = str(decimal % 2) + result
        decimal //= 2
    return "db" + result + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = []
    while decimal:
        result.append(str(decimal % 2))
        decimal //= 2
    result.reverse()
    return "".join(result) + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ''
    while decimal > 0:
        result = str(decimal % 2) + result
        decimal //= 2
    return 'db' + result + 'db'


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ""
    while decimal:
        result = str(decimal % 2) + result
        decimal //= 2
    return "db" + result + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ""
    while decimal:
        result = str(decimal % 2) + result
        decimal //= 2
    return "db" + result + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = []
    while decimal:
        result.append(str(decimal % 2))
        decimal //= 2
    result.reverse()
    return "".join(result) + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = ''
    while decimal > 0:
        result = str(decimal % 2) + result
        decimal //= 2
    return "db" + result + "db"


ProblemHumanEval/79: failed: 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
    result = []
    while decimal:
        result.append(str(decimal % 2))
        decimal //= 2
    result.reverse()
    return "".join(result)


ProblemHumanEval/80: failed: abcd
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) > 3:
        distinct = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct.add(s[i] + s[i + 1] + s[i + 2])
        s = ''.join(distinct)
    return len(s) >= 3


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) > 3:
        temp = set()
        for i in range(len(s) - 2):
            temp.add(s[i] + s[i + 1] + s[i + 2])
        s = list(temp)
    return len(s) == 1


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) >= 3:
        distinct = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct.add(s[i])
        s = ''.join(s)
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) >= 3:
        distinct = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct.add(s[i])
        s = "".join(s)
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) >= 3:
        distinct = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct.add(s[i])
        s = ''.join(sorted(distinct))
    return True


ProblemHumanEval/80: failed: invalid literal for int() with base 10: 'a'
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    nums = set()
    while s:
        num = int(s[:3])
        s = s[3:]
        if num in nums:
            return False
        nums.add(num)
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) >= 3:
        distinct_letters = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct_letters.add(s[i])
        s = ''.join(sorted(distinct_letters))
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) > 3:
        distinct = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct.add(s[i])
        s = ''.join(sorted(distinct))
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) > 3:
        count = 0
        for i in range(1, len(s) - 1):
            if s[i] == s[i - 1] or s[i] == s[i + 1]:
                count += 1
        if count == 0:
            return False
        s = [c for c in s if c != s[i - 1] and c != s[i + 1]]
    return True


ProblemHumanEval/80: failed: a
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    s = list(s)
    while len(s) >= 3:
        distinct_letters = set()
        for i in range(len(s) - 2):
            if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:
                return False
            distinct_letters.add(s[i])
        s = ''.join(sorted(distinct_letters))
    return True


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4.0:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4.0:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4.0:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4.0:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/81: failed: 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
    letter_grades = []
    for grade in grades:
        if grade >= 4:
            letter_grades.append('A+')
        elif grade >= 3.7:
            letter_grades.append('A')
        elif grade >= 3.3:
            letter_grades.append('A-')
        elif grade >= 3.0:
            letter_grades.append('B+')
        elif grade >= 2.7:
            letter_grades.append('B')
        elif grade >= 2.3:
            letter_grades.append('B-')
        elif grade >= 2.0:
            letter_grades.append('C+')
        elif grade >= 1.7:
            letter_grades.append('C')
        elif grade >= 1.3:
            letter_grades.append('C-')
        elif grade >= 1.0:
            letter_grades.append('D+')
        elif grade >= 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('D-')
    return letter_grades


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) % 2 == 0


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) % 2 == 0


ProblemHumanEval/82: failed: name 'PRIMES' is not defined
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) in PRIMES


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) % 2 == 0


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    if len(string) % 2 == 0:
        return False
    else:
        return True


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) % 2 == 0


ProblemHumanEval/82: failed: name 'PRIMES' is not defined
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) in PRIMES


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    if len(string) % 2 == 0:
        return False
    else:
        return True


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    if len(string) % 2 == 0:
        return False
    else:
        return True


ProblemHumanEval/82: failed: 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    return len(string) % 2 == 0


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    return n // 2 + 1


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    count = 0
    for i in range(1, n + 1):
        if str(i).startswith('1') or str(i).endswith('1'):
            count += 1
    return count


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    count = 0
    for i in range(1, n + 1):
        if str(i)[0] == '1' or str(i)[-1] == '1':
            count += 1
    return count


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    return sum(int(i) for i in str(n) if int(i) == 1)


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    count = 0
    for i in range(1, n + 1):
        if str(i).startswith('1') or str(i).endswith('1'):
            count += 1
    return count


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    return n // 2 + 1


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    return n // 2 + 1


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    count = 0
    for i in range(1, n + 1):
        if str(i)[0] == '1' or str(i)[-1] == '1':
            count += 1
    return count


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    count = 0
    for i in range(1, n + 1):
        if str(i)[0] == '1' or str(i)[-1] == '1':
            count += 1
    return count


ProblemHumanEval/83: failed: 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    return n - n % 2


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    sum = 0
    while N > 0:
        sum += N % 2
        N //= 2
    return str(sum)


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return "".join(str(i) for i in range(N))


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    sum = 0
    while N > 0:
        sum += N % 2
        N //= 2
    return str(sum)


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    sum = 0
    while N > 0:
        sum += N % 2
        N //= 2
    return str(sum)


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    sum = 0
    while N > 0:
        sum += N % 2
        N //= 2
    return str(sum)


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return "".join(str(i) for i in range(N + 1))


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return str(sum(int(i) for i in str(N)))


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return str(sum(int(digit) for digit in str(N)))


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return "".join(str(int(digit)) for digit in str(N))


ProblemHumanEval/84: failed: Error
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    return str(sum(int(digit) for digit in str(N)))


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, item in enumerate(lst):
        if i % 2 == 0:
            result.append(item)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i in range(len(lst)):
        if i % 2 == 0:
            result.append(lst[i])
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, val in enumerate(lst):
        if i % 2 == 0:
            result.append(val)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i in range(len(lst)):
        if i % 2 == 0:
            result.append(lst[i])
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/85: failed: 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
    result = []
    for i, num in enumerate(lst):
        if i % 2 == 0:
            result.append(num)
    return result


ProblemHumanEval/86: failed: 
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        result.append(word[::-1])
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        chars = list(word)
        chars.sort()
        result.append(''.join(chars))
    return ' '.join(result)


ProblemHumanEval/86: failed: 
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        result.append(word[::-1])
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        word = ''.join(sorted(word))
        result.append(word)
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    result = []
    words = s.split()
    for word in words:
        word = list(word)
        word.sort()
        result.append(''.join(word))
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    result = []
    words = s.split()
    for word in words:
        result.append(''.join(sorted(word)))
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        chars = list(word)
        chars.sort()
        result.append(''.join(chars))
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    words = s.split()
    result = []
    for word in words:
        chars = sorted(word)
        result.append(''.join(chars))
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    result = []
    words = s.split()
    for word in words:
        result.append(''.join(sorted(word)))
    return ' '.join(result)


ProblemHumanEval/86: passed
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    result = []
    words = s.split()
    for word in words:
        chars = list(word)
        chars.sort()
        result.append(''.join(chars))
    return ' '.join(result)


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for i in range(len(lst)):
        if x in lst[i]:
            result.append((i, len(lst[i]) - lst[i].index(x)))
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for row in lst:
        if x in row:
            result.append((row.index(x), len(row) - row.index(x) - 1))
    return sorted(result, key=lambda x: x[0])


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for i in range(len(lst)):
        if x in lst[i]:
            result.append((i, len(lst[i]) - lst[i].index(x)))
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for i, row in enumerate(lst):
        if x in row:
            result.append((i, row.index(x)))
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for row in lst:
        if row[x] != 0:
            result.append((x, row.index(row[x])))
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for row in lst:
        if x in row:
            result.append((row.index(x), len(row) - row.index(x) - 1))
    result.sort(key=lambda x: x[0], reverse=True)
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for i in range(len(lst)):
        if x in lst[i]:
            result.append((i, len(lst[i]) - lst[i].index(x)))
    return sorted(result, key=lambda x: x[0])


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for row in lst:
        if row[x] != 0:
            result.append((row.index(x), row.index(x) + len(row) - 1))
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    return result


ProblemHumanEval/87: failed: 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for row in lst:
        if x in row:
            result.append((row.index(x), len(row) - row.index(x) - 1))
    return sorted(result, key=lambda x: x[0])


ProblemHumanEval/87: failed: object of type 'int' has no len()
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    result = []
    for i, row in enumerate(lst):
        if x in row:
            result.append((i, row.index(x)))
    return sorted(result, key=lambda x: (x[0], len(x[1]) - 1))


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) < 2:
        return array
    sum_of_first_last = array[0] + array[-1]
    if sum_of_first_last % 2 == 0:
        return array
    array.sort()
    return array[::-1]


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) < 2:
        return array
    sum_first_last = array[0] + array[-1]
    if sum_first_last % 2 == 0:
        array.sort()
    else:
        array.sort(reverse=True)
    return array


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) <= 1:
        return array
    
    sum_ = sum(array)
    if sum_ % 2 == 0:
        array.sort()
    else:
        array.sort(reverse=True)
    
    return array


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) == 0:
        return []
    sum_first_last = array[0] + array[-1]
    if sum_first_last % 2 == 0:
        return sorted(array)
    else:
        return sorted(array, reverse=True)


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) == 0:
        return []
    sum_first_last = array[0] + array[-1]
    if sum_first_last % 2 == 0:
        return sorted(array)
    return sorted(array, reverse=True)


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) == 0:
        return []
    if len(array) == 1:
        return array
    if sum(array) % 2 == 0:
        array.sort()
    else:
        array.sort(reverse=True)
    return array


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) < 2:
        return array


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) <= 1:
        return array


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) < 2:
        return array
    
    sum_first_last = array[0] + array[-1]
    if sum_first_last % 2 == 0:
        return array
    
    array.sort()
    return array[::-1]


ProblemHumanEval/88: failed: Error
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
    if len(array) <= 1:
        return array
    
    sum_ = sum(array)
    if sum_ % 2 == 0:
        array.sort()
    else:
        array.sort(reverse=True)
    
    return array


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    alphabet = list(s)
    alphabet.sort()
    alphabet = [chr(ord(c) + 2) for c in alphabet]
    return ''.join(alphabet)


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    def encrypt(s):
        return ''.join(chr(ord(c) + 2) for c in s)
    return encrypt(s)


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    return ''.join(chr((ord(c) + 2) % 26) for c in s)


ProblemHumanEval/89: failed: 'list' object has no attribute 'rotate'
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    alphabet = list(s)
    alphabet.rotate(2)
    return ''.join(alphabet)


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    def encrypt(s):
        result = ''
        for c in s:
            if c.isalpha():
                result += chr((ord(c) - ord('a') + 2) % 26 + ord('a'))
            else:
                result += c
        return result


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    encrypted = ''
    for c in s:
        if c in alphabet:
            index = alphabet.find(c)
            index += 2
            index %= len(alphabet)
            encrypted += alphabet[index]
        else:
            encrypted += c
    return encrypted


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    def encrypt(s):
        return ''.join(chr((ord(c) + 2) % 26 + ord('a')) for c in s)
    return encrypt(s)


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    encrypted_string = ''
    for c in s:
        index = alphabet.find(c)
        encrypted_string += alphabet[(index + 2) % len(alphabet)]
    return encrypted_string


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    return ''.join(chr(ord(c) + 2) for c in s)


ProblemHumanEval/89: failed: This prints if this assert fails 1 (good for debugging!)
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    def encrypt(s):
        return ''.join(chr((ord(c) + 2) % 26 + ord('a')) for c in s)
    return encrypt(s)


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    for i in range(1, len(lst)):
        if lst[i] < smallest:
            smallest = lst[i]
    
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    second_smallest = lst[0]
    
    for i in range(1, len(lst)):
        if lst[i] < smallest:
            second_smallest = smallest
            smallest = lst[i]
        elif lst[i] < second_smallest:
            second_smallest = lst[i]
            
    return second_smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for num in lst:
        if num < smallest:
            smallest = num
    
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    for i in lst:
        if i < smallest:
            smallest = i
    
    index = lst.index(smallest)
    return lst[(index + 1) % len(lst)]


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for num in lst:
        if num < smallest:
            smallest = num
    
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for item in lst:
        if item < smallest:
            smallest = item
            
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    for i in range(1, len(lst)):
        if lst[i] < smallest:
            smallest = lst[i]
            
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for item in lst:
        if item < smallest:
            smallest = item
    
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for num in lst:
        if num < smallest:
            smallest = num
    
    return smallest


ProblemHumanEval/90: failed: 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
    if not lst:
        return None
    
    smallest = lst[0]
    
    for item in lst:
        if item < smallest:
            smallest = item
    
    return smallest


ProblemHumanEval/91: failed: Test 3
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for i in range(len(S)):
        if S[i] == '?' or S[i] == '!' or S[i] == '.':
            if S[i-1] == '?' or S[i-1] == '!' or S[i-1] == '.':
                count += 1
    return count


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for c in S:
        if c == '?' or c == '!' or c == '.':
            count += 1
    return count


ProblemHumanEval/91: failed: Test 3
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for i in range(len(S)):
        if S[i] == '?' or S[i] == '!' or S[i] == '.':
            if i > 0 and S[i - 1] == '?' or S[i - 1] == '!' or S[i - 1] == '.':
                count += 1
    return count


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for i in range(len(S)):
        if S[i] == '?' or S[i] == '!' or S[i] == '.':
            if S[i-1] != 'I':
                count += 1
    return count


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for c in S:
        if c == 'I':
            count += 1
    return count


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for c in S:
        if c == 'I':
            count += 1
    return count


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for i in range(len(S)):
        if S[i] == '?' or S[i] == '!' or S[i] == '.':
            if S[i-1] != 'I':
                count += 1
    return count


ProblemHumanEval/91: failed: Test 3
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for c in S:
        if c == '?' or c == '!' or c == '.':
            count += 1
    return count // 2


ProblemHumanEval/91: failed: Test 3
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for c in S:
        if c == '?' or c == '!' or c == '.':
            count += 1
    return count // 2


ProblemHumanEval/92: failed: 'float' object has no attribute 'isdigit'
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y or x.isdigit() and y.isdigit() and z.isdigit()


ProblemHumanEval/91: failed: Test 2
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    count = 0
    for word in S.split():
        if word.startswith("I"):
            count += 1
    return count


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: 'float' object has no attribute 'isdigit'
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y or x.isdigit() and y.isdigit() and z.isdigit()


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/92: failed: This prints if this assert fails 3 (good for debugging!)
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
    return x == y + z or y == x + z or z == x + y


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join([chr(ord(c) ^ ord('a') ^ ord('A')) if c in 'aeiouAEIOU' else c for c in message])


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join([chr(ord(c) ^ ord(c.lower())) if c.lower() in 'aeiou' else c for c in message])


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join([chr(ord(c) ^ ord('a') ^ ord('A')) if c.isalpha() else c for c in message])


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join([chr(ord(c) ^ ord('a') if c.lower() in 'aeiou' else ord(c) ^ ord('A')) for c in message])


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    result = []
    for c in message:
        if c.isalpha():
            index = ord(c) - ord('a')
            if index % 2 == 0:
                result.append(chr(ord('a') + index // 2))
            else:
                result.append(chr(ord('A') + (index - 1) // 2))
        else:
            result.append(c)
    return ''.join(result)


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join(c.upper() if c.isalpha() and c not in 'aeiou' else c.lower() if c.isalpha() else c for c in message)


ProblemHumanEval/93: failed: unmatched ')' (<string>, line 16)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join(chr(ord(c) + (ord(c) < 97 or ord(c) > 123) - (ord(c) < 65 or ord(c) > 90)) % 26) for c in message)


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join(c.lower() if c.isalpha() else c for c in message)


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    return ''.join([chr(ord(c) ^ ord(c.lower())) if c.lower() in 'aeiou' else c for c in message])


ProblemHumanEval/93: failed: This prints if this assert fails 1 (good for debugging!)
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    result = []
    for c in message:
        if c.isalpha():
            index = ord(c) - ord('a')
            if index % 2 == 0:
                result.append(chr(ord('A') + index // 2))
            else:
                result.append(chr(ord('a') + (index - 1) // 2))
        else:
            result.append(c)
    return ''.join(result)


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += int(str(i)[-1])
    return sum


ProblemHumanEval/94: failed: name 'is_prime' is not defined
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    max_prime = 0
    for i in lst:
        if is_prime(i):
            max_prime = i
    sum_digits = 0
    while max_prime > 0:
        sum_digits += max_prime % 10
        max_prime //= 10
    return sum_digits


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += int(str(i)[-1])
    return sum


ProblemHumanEval/94: failed: name 'sum_digits' is not defined
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += sum_digits(i)
    return sum


ProblemHumanEval/94: failed: name 'sum_digits' is not defined
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += sum_digits(i)
    return sum


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += i
    return sum


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += int(str(i)[-1])
    return sum


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += i
        if i > 9:
            sum += i % 10
    return sum


ProblemHumanEval/94: failed: This prints if this assert fails 1 (good for debugging!)
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    max_prime = 0
    for i in lst:
        if i > max_prime:
            max_prime = i
    sum_digits = 0
    while max_prime > 0:
        sum_digits += max_prime % 10
        max_prime //= 10
    return sum_digits


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not key.islower() and not key.isupper():
            return False
    
    return True


ProblemHumanEval/94: failed: name 'sum_digits' is not defined
def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
    sum = 0
    for i in lst:
        sum += sum_digits(i)
    return sum


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    for key in dict:
        if not (isinstance(key, str) or isinstance(key, int)):
            return False
        if not key.islower() and not key.isupper():
            return False
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not (isinstance(key, str) and (key.islower() or key.isupper())):
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not key.islower() and not key.isupper():
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not key.islower() and not key.isupper():
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not isinstance(key, str):
            return False
        if key.islower():
            continue
        if not key.isupper():
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):
            return False
    
    return True


ProblemHumanEval/95: failed: Second test error: True
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
    if not dict:
        return False
    
    for key in dict:
        if not isinstance(key, str):
            return False
        if key.islower():
            return True
        if key.isupper():
            return False
    return True


ProblemHumanEval/96: failed: name 'is_prime' is not defined
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    result = [2]
    for i in range(3, n + 1, 2):
        if is_prime(i):
            result.append(i)
    return result


ProblemHumanEval/96: failed: name 'is_prime' is not defined
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    result = [2]
    for i in range(3, n + 1, 2):
        if is_prime(i):
            result.append(i)
    return result


ProblemHumanEval/96: failed: 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    primes = [2]
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            primes.append(i)
            primes.append(n // i)
    return primes


ProblemHumanEval/96: failed: name 'is_prime' is not defined
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n == 0:
        return []
    result = [2]
    for i in range(3, n + 1, 2):
        if is_prime(i):
            result.append(i)
    return result


ProblemHumanEval/96: failed: 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n == 0:
        return []
    if n == 1:
        return [2]
    if n == 2:
        return [2, 3]
    if n % 2 == 0:
        return [2, 3]


ProblemHumanEval/96: failed: name 'is_prime' is not defined
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    primes = [2]
    for i in range(3, n + 1, 2):
        if is_prime(i):
            primes.append(i)
    return primes


ProblemHumanEval/96: failed: 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    primes = [2]
    i = 3
    while len(primes) < n:
        while i * i <= n:
            if n % i == 0:
                break
            i += 2
        if i * i > n:
            break
        primes.append(i)
        i += 2
    return primes


ProblemHumanEval/96: failed: 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n == 0:
        return []
    primes = [2]
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            primes.append(i)
            primes.append(n // i)
    if n != 1:
        primes.append(n)
    return primes


ProblemHumanEval/96: failed: name 'is_prime' is not defined
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n == 0:
        return []
    result = []
    for i in range(2, n + 1):
        if is_prime(i):
            result.append(i)
    return result


ProblemHumanEval/96: failed: 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n == 0:
        return []
    primes = [2]
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            primes.append(i)
            primes.append(n // i)
    return primes


ProblemHumanEval/97: failed: First test error: 60976
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    return a * b


ProblemHumanEval/97: failed: First test error: 60976
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    return a * b


ProblemHumanEval/97: failed: First test error: 60976
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    return a * b


ProblemHumanEval/97: failed: First test error: 60976
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    return a * b


ProblemHumanEval/97: failed: First test error: 14
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    result = 0
    for i in range(10):
        result += a % 10 * b % 10
        a //= 10
        b //= 10
    return result


ProblemHumanEval/97: failed: First test error: 16281642800
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    result = 0
    while b:
        if b % 2 == 1:
            result += a
        a *= 10
        b //= 2
    return result


ProblemHumanEval/97: failed: object of type 'int' has no len()
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    result = 0
    for i in range(len(a)):
        result += a[i] * b[i]
    return result


ProblemHumanEval/97: failed: First test error: 10
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    result = 0
    for i in range(10):
        if a % 10 == i or b % 10 == i:
            result += i
    return result


ProblemHumanEval/97: failed: object of type 'int' has no len()
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    result = 0
    for i in range(len(a)):
        result += a[i] * b[i]
    return result


ProblemHumanEval/97: failed: First test error: 60976
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
    return a * b


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i].isupper():
            count += 1
    return count


ProblemHumanEval/98: failed: 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper():
            count += 1
    return count


ProblemHumanEval/99: failed: Test 3
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    if value.startswith("-"):
        value = value[1:]
    value = float(value)
    return int(value) if abs(value - int(value)) < 0.5 else int(value + 0.5)


ProblemHumanEval/99: failed: type str doesn't define __round__ method
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    return int(round(value))


ProblemHumanEval/99: failed: type str doesn't define __round__ method
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    return int(round(value))


ProblemHumanEval/99: failed: invalid literal for int() with base 10: '14.5'
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    if value.startswith("-"):
        return int(value) - 1
    else:
        return int(value)


ProblemHumanEval/99: failed: invalid literal for int() with base 10: '14.5'
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    if value.startswith("-"):
        return int(value) - 1
    return int(value)


ProblemHumanEval/99: failed: Test 2
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    return int(value) if value.isdigit() else int(value[:-1]) if value[-1] == '.' else 0


ProblemHumanEval/99: failed: invalid literal for int() with base 10: '14.'
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    return int(value) if value.isdigit() else int(value[:-1]) if value[-1] == '.' else int(value[:-1]) + 1


ProblemHumanEval/99: failed: invalid literal for int() with base 10: '14.5'
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    if value.startswith("-"):
        value = value[1:]
    return int(value) if int(value) % 2 == 0 else int(value) + 1


ProblemHumanEval/99: failed: Test 2
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    return int(value) if value.isdigit() else int(value[:-1]) if value[-1] == '.' else 0


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = []
    current = n
    while current > 1:
        if current % 2 == 0:
            result.append(current // 2)
        else:
            result.append(current // 2 + 1)
        current = current // 2
    result.append(current)
    return result


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = [n]
    while n > 1:
        if n % 2 == 0:
            n //= 2
        else:
            n += 1
        result.append(n)
    return result


ProblemHumanEval/99: failed: Test 1
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    if value.startswith("-"):
        value = value[1:]
    return int(value) if int(value) == value else int(value) - 1


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = []
    for i in range(n):
        if i % 2 == 0:
            result.append(i + 1)
        else:
            result.append(i)
    return result


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = []
    while n:
        result.append(n % 2)
        n //= 2
    return result


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    return [n] + ([0] * (n - 1)) + [n + 1]


ProblemHumanEval/100: failed: maximum recursion depth exceeded in comparison
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    if n % 2 == 0:
        return [n] + make_a_pile(n // 2)
    else:
        return [n - 1, n] + make_a_pile((n - 1) // 2)


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    return [n] + [n + i for i in range(1, n - 1, 2)]


ProblemHumanEval/100: failed: Test 3
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = [0] * (n + 1)
    result[0] = n
    for i in range(1, n + 1):
        if i % 2 == 0:
            result[i] = result[i // 2]
        else:
            result[i] = result[(i - 1) // 2] + 1
    return result


ProblemHumanEval/100: failed: maximum recursion depth exceeded in comparison
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    if n % 2 == 0:
        return [n] + make_a_pile(n - 2)
    else:
        return [n - 1, n] + make_a_pile(n - 2)


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split()


ProblemHumanEval/100: failed: maximum recursion depth exceeded in comparison
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    if n % 2 == 0:
        return [n] + make_a_pile(n // 2)
    else:
        return [n - 1, n] + make_a_pile((n - 2) // 2)


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split()


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split()


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split()


ProblemHumanEval/101: failed: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    return s.split(",")


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x <= y:
        for i in range(x, y + 1):
            if i % 2 == 0:
                return i
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x > y:
        return -1
    if x % 2 == 0:
        x += 1
    while x <= y:
        if x % 2 == 0:
            return x
        x += 2
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x > y:
        return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x <= y:
        for i in range(x, y + 1):
            if i % 2 == 0:
                return i
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x <= y:
        for i in range(x, y + 1, 2):
            if i % 2 == 0:
                return i
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x <= y:
        for i in range(x, y + 1):
            if i % 2 == 0:
                return i
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x > y:
        return -1
    
    for i in range(x, y + 1):
        if i % 2 == 0:
            return i
    
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x > y:
        return -1
    result = x
    while result <= y:
        if result % 2 == 0:
            return result
        result += 1
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x <= y:
        for i in range(x, y + 1):
            if i % 2 == 0:
                return i
    return -1


ProblemHumanEval/102: failed: 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
    if x > y:
        return -1


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    result = 0
    for i in range(n, m + 1):
        result += i
    return bin(result // (m - n + 1))[2:]


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    
    sum = 0
    for i in range(n, m + 1):
        sum += i
    
    return bin(sum // (m - n + 1))[2:]


ProblemHumanEval/103: failed: integer division or modulo by zero
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    result = 0
    while n <= m:
        result += n
        n += 1
    return bin(result // (m - n + 1))[2:]


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    result = 0
    for i in range(n, m + 1):
        result += i
    return bin(result // (m - n + 1))[2:]


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    sum = 0
    for i in range(n, m + 1):
        sum += i
    return bin(sum // (m - n + 1))[2:].zfill(m - n + 1)


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    result = 0
    for i in range(n, m + 1):
        result += i
    return bin(result // (m - n + 1))[2:].zfill(m - n + 1)


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    
    sum = 0
    i = n
    while i <= m:
        sum += i
        i += 1
    
    return bin(sum // (m - n + 1))[2:]


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    sum = 0
    for i in range(n, m + 1):
        sum += i
    return bin(sum // (m - n + 1))[2:].zfill(m - n + 1)


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    result = 0
    for i in range(n, m + 1):
        result += i
    return bin(result // (m - n + 1))[2:]


ProblemHumanEval/103: failed: 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    
    sum = 0
    for i in range(n, m + 1):
        sum += i
    
    return bin(sum // (m - n + 1))[2:]


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    return [i for i in x if i % 10 != 0]


ProblemHumanEval/104: failed: unsupported operand type(s) for %: 'list' and 'int'
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    unique_digits = []
    for i in range(1, 10):
        if x % i == 0:
            unique_digits.append(i)
    return unique_digits


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    return [i for i in x if sum(int(j) for j in str(i)) % 2 == 0]


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    result = []
    for digit in x:
        if digit % 2 == 0:
            result.append(digit)
    return sorted(result)


ProblemHumanEval/104: failed: unsupported operand type(s) for %: 'list' and 'int'
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    unique_digits = []
    for digit in range(1, 10):
        if x % digit == 0:
            continue
        unique_digits.append(digit)
    return unique_digits


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    digits = set()
    for d in str(x):
        if d not in digits:
            digits.add(d)
    return sorted(list(digits))


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    unique = []
    for n in x:
        if n % 10 not in unique:
            unique.append(n % 10)
    return unique


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    result = []
    for i in range(len(x)):
        if x[i] % 10 == 0:
            continue
        result.append(x[i])
    return result


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    return [i for i in x if not i % 10]


ProblemHumanEval/104: failed: 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
    digits = set()
    for d in str(x):
        if d not in digits:
            digits.add(d)
    return sorted(list(digits))


ProblemHumanEval/105: failed: object of type 'int' has no len()
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    arr.sort(key=len)
    arr.reverse()
    result = []
    for i in range(len(arr)):
        if arr[i] > 0 and arr[i] < 10:
            result.append(chr(ord('One') + arr[i] - 1))
        elif arr[i] == 10:
            result.append('Ten')
        elif arr[i] == 11:
            result.append('Eleven')
        elif arr[i] == 12:
            result.append('Twelve')
        elif arr[i] == 13:
            result.append('Thirteen')
        elif arr[i] == 14:
            result.append('Fourteen')
        elif arr[i] == 15:
            result.append('Fifteen')
        elif arr[i] == 16:
            result.append('Sixteen')
        elif arr[i] == 17:
            result.append('Seventeen')
        elif arr[i] == 18:
            result.append('Eighteen')
        elif arr[i] == 19:
            result.append('Nineteen')
    return result


ProblemHumanEval/105: failed: object of type 'int' has no len()
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    arr.sort(key=len)
    arr.reverse()
    result = []
    for digit in arr:
        if digit < 10:
            result.append(str(digit))
        else:
            result.append(chr(ord('A') + digit - 10))
    return result


ProblemHumanEval/105: failed: Error
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    result = []
    
    for i in range(len(arr)):
        if arr[i] > 0 and arr[i] <= 9:
            result.append(str(arr[i]))
            
    return result


ProblemHumanEval/105: failed: object of type 'int' has no len()
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    arr.sort(key=len)
    arr.reverse()
    result = []
    for i in range(len(arr)):
        if arr[i] >= 1 and arr[i] <= 9:
            result.append(chr(ord('One') + arr[i] - 1))
        else:
            result.append('')
    return result


ProblemHumanEval/105: failed: Error
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    result = []
    
    for num in arr:
        if 1 <= num <= 9:
            result.append(str(num))
            
    return result


ProblemHumanEval/105: failed: Error
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    if not arr:
        return []
    
    result = []
    
    for num in arr:
        if 1 <= num <= 9:
            result.append(str(num))
    
    return sorted(result, reverse=True)


ProblemHumanEval/105: failed: ord() expected a character, but string of length 3 found
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    if not arr:
        return []
    
    arr.sort(key=lambda x: (x // 10 - 1, x % 10))
    arr.reverse()
    
    result = []
    for num in arr:
        if num > 9:
            continue
        result.append(chr(ord('One') + num))
    
    return result


ProblemHumanEval/105: failed: ord() expected a character, but string of length 3 found
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    result = []
    
    for n in arr:
        if 1 <= n <= 9:
            result.append(chr(ord('One') + n - 1))
        else:
            result.append(str(n))
    
    return result


ProblemHumanEval/105: failed: ord() expected a character, but string of length 3 found
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    result = []
    
    for n in arr:
        if n > 0 and n < 10:
            result.append(chr(ord('One') + n - 1))
        else:
            result.append('')
    
    return result


ProblemHumanEval/105: failed: object of type 'int' has no len()
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    if not arr:
        return []
    
    arr.sort(key=len)
    arr.reverse()
    
    return [str(i) for i in range(1, 10)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(i * f(i // 2))
        else:
            result.append(sum(range(1, i + 1)))
    return result


ProblemHumanEval/106: failed: name 'factorial' is not defined
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [i * (i + 1) for i in range(1, n + 1) if i % 2 == 0] + [i for i in range(1, n + 1) if i % 2 != 0]


ProblemHumanEval/106: failed: name 'factorial' is not defined
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [i if i % 2 == 0 else i * (i + 1) for i in range(1, n + 1)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(i * f(i // 2))
        else:
            result.append(sum(range(1, i + 1)))
    return result


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(i * f(i - 1))
        else:
            result.append(sum(range(1, i + 1)))
    return result


ProblemHumanEval/106: failed: name 'factorial' is not defined
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]


ProblemHumanEval/106: failed: 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
    return [i * (i - 1) for i in range(1, n + 1)]


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count_even, count_odd = 0, 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return count_even, count_odd


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            count += 1
        if i % 10 == 0:
            count += 1
    return (count, n - count)


ProblemHumanEval/107: failed: name 'is_palindrome' is not defined
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count = 0
    for i in range(1, n + 1):
        if is_palindrome(i) and is_palindrome(i + 1):
            count += 1
    return count, count


ProblemHumanEval/107: failed: name 'is_palindrome' is not defined
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count = 0
    for i in range(1, n + 1):
        if is_palindrome(i) and is_palindrome(i, True):
            count += 1
    return count, count + 1


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count_even = 0
    count_odd = 0


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count_even = count_odd = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return count_even, count_odd


ProblemHumanEval/107: failed: name 'is_palindrome' is not defined
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            count += 1
            if i % 2 == 0:
                count += 1
    return count, count


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count_even, count_odd = 0, 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return (count_even, count_odd)


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count = [0, 0]
    for i in range(1, n + 1):
        if i % 2 == 0:
            count[0] += 1
        else:
            count[1] += 1
    return count


ProblemHumanEval/107: failed: 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    count_even, count_odd = 0, 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return count_even, count_odd


ProblemHumanEval/108: failed: 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: bad operand type for abs(): 'str'
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if sum(map(abs, str(num))) > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: bad operand type for abs(): 'str'
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if sum(map(abs, str(num))) > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: invalid literal for int() with base 10: '-'
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if sum(map(int, str(num))) > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: invalid literal for int() with base 10: '-'
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if sum(map(int, str(num))) > 0:
            count += 1
    return count


ProblemHumanEval/108: failed: bad operand type for abs(): 'str'
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
    count = 0
    for num in arr:
        if sum(map(abs, str(num))) > 0:
            count += 1
    return count


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: 
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    n = len(arr)
    for i in range(n - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            arr[i], arr[i - 1] = arr[i - 1], arr[i]
            return True
    return False


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if len(arr) < 2:
        return True
    
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    n = len(arr)
    
    for i in range(n - 1):
        if arr[i] > arr[i + 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if len(arr) == 0:
        return True
    
    n = len(arr)
    
    sorted_arr = [0] * n
    
    sorted_arr[0] = arr[0]
    
    for i in range(1, n):
        sorted_arr[i] = arr[i] + arr[i - 1]
    
    return sorted_arr == sorted(sorted_arr)


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if len(arr) < 2:
        return True
    
    sorted_arr = sorted(arr)
    
    for i in range(1, len(arr)):
        if arr[i] < sorted_arr[i - 1]:
            return False
    
    return True


ProblemHumanEval/109: failed: This prints if this assert fails 1 (good for debugging!)
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    if not arr:
        return True
    
    n = len(arr)
    
    for i in range(n - 1):
        if arr[i] > arr[i + 1]:
            return False
    
    return True


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    for i in range(len(lst1)):
        if lst1[i] % 2 != lst2[i] % 2:
            return "NO"
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    for i in range(len(lst1)):
        if lst1[i] % 2 != lst2[i] % 2:
            return "NO"
    return "YES"


ProblemHumanEval/110: failed: 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
    if len(lst1) != len(lst2):
        return "NO"
    
    for i in range(len(lst1)):
        if lst1[i] % 2 != 0 or lst2[i] % 2 != 0:
            return "NO"
    
    return "YES"


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 1
        else:
            counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 1
        else:
            counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 1
        else:
            counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 1
        else:
            counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/111: failed: This prints if this assert fails 1 (good for debugging!)
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
    counts = {}
    for c in test:
        if c not in counts:
            counts[c] = 0
        counts[c] += 1
    return counts


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    deleted = False
    for i in range(len(s) - 1, -1, -1):
        if s[i] == c:
            deleted = True
            result = result + s[i]
        else:
            if deleted:
                result = result + s[i]
            else:
                return s, False
    return result, True


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ''
    deleted = False
    for i in range(len(s) - 1, -1, -1):
        if s[i] == c:
            deleted = True
            result = s[:i] + s[i + 1:]
        else:
            if deleted:
                result = s[:i] + s[i + 1:]
                deleted = False
            else:
                result = s[:i] + s[i + 1:]
    return result, deleted


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ''
    i = 0
    while i < len(s):
        if s[i] != c:
            result += s[i]
        i += 1
    return result, result == s[::-1]


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    deleted = False
    for i in range(len(s) - 1, -1, -1):
        if s[i] == c:
            deleted = True
            result = result + s[i]
        else:
            break
    return (result, deleted)


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    deleted = 0
    for i in range(len(s)):
        if s[i] == c:
            deleted += 1
        else:
            result += s[i - deleted]
    return result, deleted % 2 == 0


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = []
    for c in s:
        if c not in c:
            result.append(c)
    return "".join(result), True if len(result) == 0 else False


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    deleted = False
    for i in range(len(s) - 1, -1, -1):
        if s[i] == c:
            deleted = True
        else:
            result += s[i]
    return (result, deleted)


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    deleted = False
    for i in range(len(s) - 1, -1, -1):
        if s[i] == c:
            deleted = True
            result = s[:i] + s[i + 1:]
        else:
            result = s[:i] + s[i + 1:]
            break
    return (result, deleted)


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ""
    i = 0
    while i < len(s):
        if s[i] != c:
            result += s[i]
        i += 1
    return result, result == s[::-1]


ProblemHumanEval/112: failed: 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    result = ''
    for i in range(len(s)):
        if s[i] != c:
            result += s[i]
    return (result, result[::-1] == s)


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [len(str(i)) % 2 for i in lst]


ProblemHumanEval/113: failed: object of type 'int' has no len()
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(len(str(i).count('1'))) for i in lst]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(sum(int(d) % 2 for d in s)) for s in lst]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(sum(int(digit) for digit in num)) for num in lst]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(len(str(num)) - num.count('1')) for num in lst]


ProblemHumanEval/113: failed: not all arguments converted during string formatting
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(len(list(filter(lambda x: x % 2 == 1, lst[i])))) for i in range(len(lst))]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [len(str(i)) % 2 for i in lst]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [len(str(i)) % 2 for i in lst]


ProblemHumanEval/113: failed: Test 1
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [len(str(i)) % 2 for i in lst]


ProblemHumanEval/113: failed: not all arguments converted during string formatting
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [str(len(list(filter(lambda x: x % 2 != 0, lst[i]))) % 2) for i in range(len(lst))]


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    sum_so_far = 0
    for num in nums:
        sum_so_far += num
        if sum_so_far < min_sum:
            min_sum = sum_so_far
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    sum_ = 0
    min_sum = float('inf')
    for num in nums:
        sum_ += num
        if sum_ < min_sum:
            min_sum = sum_
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    sum_ = 0
    min_sum = float('inf')
    for num in nums:
        sum_ += num
        min_sum = min(min_sum, sum_)
    return min_sum


ProblemHumanEval/114: failed: 
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    sum_ = 0
    for num in nums:
        sum_ += num
        if sum_ < min_sum:
            min_sum = sum_
        else:
            sum_ = 0
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    sum_ = 0
    min_sum = float('inf')
    for num in nums:
        sum_ += num
        if sum_ < min_sum:
            min_sum = sum_
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    sum_so_far = 0
    for num in nums:
        sum_so_far += num
        if sum_so_far < min_sum:
            min_sum = sum_so_far
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    sum_ = 0
    min_sum = float('inf')
    for num in nums:
        sum_ += num
        min_sum = min(min_sum, sum_)
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    sum_ = 0
    for num in nums:
        sum_ += num
        if sum_ < min_sum:
            min_sum = sum_
        if sum_ == 0:
            break
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum < 0:
            current_sum = 0
    return min_sum


ProblemHumanEval/114: failed: This prints if this assert fails 1 (good for debugging!)
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum < 0:
            current_sum = 0
    return min_sum


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    n = len(grid)
    dp = [[0] * (capacity + 1) for _ in range(n)]
    
    for i in range(n):
        for j in range(capacity + 1):
            if grid[i][j] == 1:
                dp[i][j] = dp[i - 1][j] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - grid[i][j]])
                
    return dp[n - 1][capacity]


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    n = len(grid)
    max_water = 0
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                max_water = max(max_water, capacity)
                grid[i][j] = 0


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * (capacity + 1) for _ in range(m)]
    
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 1:
                for k in range(capacity + 1):
                    dp[i][k] = max(dp[i][k], dp[i - 1][k] + 1)
                    
    return dp[m - 1][capacity]


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * (capacity + 1) for _ in range(m + 1)]


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * (capacity + 1) for _ in range(m + 1)]
    
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 1:
                for k in range(capacity + 1):
                    dp[i + 1][k] = max(dp[i + 1][k], dp[i][k] + grid[i][j])
    
    return dp[m][capacity]


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    n = len(grid)
    max_water = 0
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                max_water = max(max_water, capacity)
                grid[i][j] = 0
    return max_water


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    n = len(grid)
    max_water = 0
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                max_water = max(max_water, capacity)
                grid[i][j] = 0


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * (capacity + 1) for _ in range(m)]


ProblemHumanEval/115: failed: Error
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * (capacity + 1) for _ in range(m)]


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = [0] * 32
    for num in arr:
        ones[bin(num).count('1')] += 1
    return sorted(arr, key=lambda x: (ones[bin(x).count('1')], x))


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = [0] * 32
    for num in arr:
        ones[bin(num).count('1')] += 1
    return sorted(arr, key=lambda x: (ones[bin(x).count('1')], x))


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = 0
    for n in arr:
        ones += n.bit_count()


ProblemHumanEval/116: failed: invalid literal for int() with base 2: '0b'
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = []
    for num in arr:
        ones.append(bin(num).count('1'))
    ones.sort()
    return [int(bin(num).replace('1',''), 2) for num in ones]


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = []
    zeros = []


ProblemHumanEval/116: failed: 'int' object has no attribute 'count'
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = 0
    sorted_arr = []
    for num in arr:
        ones += num.count('1')
    sorted_arr.extend(sorted(arr, key=lambda x: (x.count('1'), x)))
    return sorted_arr


ProblemHumanEval/116: failed: 'int' object has no attribute 'count'
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = 0
    result = []
    for num in arr:
        ones += num.count('1')
    arr.sort(key=lambda x: (x.count('1'), x))
    for num in arr:
        result.extend([num] * ones)
        ones -= num.count('1')
    return result


ProblemHumanEval/116: failed: 'int' object is not iterable
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = []
    for num in arr:
        ones.extend(bin(num).count('1'))
    ones.sort()
    return [int(bin(num).replace('1',''), 2) for num in ones]


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = 0
    for n in arr:
        ones += n.bit_count()


ProblemHumanEval/116: failed: 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
    ones = [0] * 32
    for num in arr:
        ones[bin(num).count('1')] += 1
    return sorted(arr, key=lambda x: (ones[bin(x).count('1')], x))


ProblemHumanEval/117: failed: First test error: []
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    if s == "":
        return []
    result = []
    i = 0
    while i < len(s):
        if s[i].isalpha():
            count = 0
            j = i
            while j < len(s) and s[j].isalpha():
                if s[j].lower() == s[i].lower():
                    count += 1
                j += 1
            if count == n:
                result.append(s[i:j])
        i += 1
    return result


ProblemHumanEval/117: failed: First test error: ['Mary', 'lamb']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    result = []
    if not s:
        return result
    
    words = s.split()
    for word in words:
        if len(word) == n:
            result.append(word)
    
    return result


ProblemHumanEval/117: failed: First test error: []
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    if not s:
        return []
    words = []
    i = 0
    while i < len(s):
        if s[i].isalpha() and s[i].islower():
            count = 0
            j = i
            while j < len(s) and s[j].isalpha() and s[j].islower():
                if s[j] == s[i]:
                    count += 1
                else:
                    break
                j += 1
            if count == n:
                words.append(s[i:j])
        i += 1
    return words


ProblemHumanEval/117: failed: First test error: ['Mary', 'lamb']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    words = s.split()
    result = []
    for word in words:
        if len(word) == n:
            result.append(word)
    return result


ProblemHumanEval/117: failed: name 'is_valid' is not defined
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    result = []
    if len(s) == 0:
        return result
    
    i = 0
    while i < len(s) - n + 1:
        if is_valid(s, i, n):
            result.append(s[i:i + n])
        i += 1
    
    return result


ProblemHumanEval/117: failed: name 'count_consonants' is not defined
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    words = []
    if s == "":
        return words
    
    for i in range(len(s)):
        if count_consonants(s[:i + 1]) == n:
            words.append(s[:i + 1])
    
    return words


ProblemHumanEval/117: failed: First test error: ['Mary', 'lamb']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    result = []
    if len(s) == 0:
        return result
    
    words = s.split()
    for word in words:
        if len(word) == n:
            result.append(word)
            
    return result


ProblemHumanEval/117: failed: First test error: ['Mary', 'lamb']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    result = []
    if len(s) == 0:
        return result
    
    words = s.split()
    for word in words:
        if len(word) == n:
            result.append(word)
    return result


ProblemHumanEval/117: failed: First test error: ['Mary', 'ary ', 'ry h', 'y ha', ' had', 'had ', 'ad a', 'd a ', ' a l', 'a li', ' lit', 'litt', 'ittl', 'ttle', 'tle ', 'le l', 'e la', ' lam', 'lamb']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    if not s:
        return []
    words = []
    for i in range(len(s) - n + 1):
        word = s[i:i + n]
        if word in s:
            words.append(word)
    return words


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    
    left_vowel = ""
    right_vowel = ""
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels:
            left_vowel = word[i - 1]
            break
            
    for i in range(len(word)):
        if word[i] in vowels:
            right_vowel = word[i]
            break
            
    if left_vowel and right_vowel:
        return min(left_vowel, right_vowel)
    else:
        return ""


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = "aeiouAEIOU"
    right_vowel_index = word.rfind(vowels)
    left_vowel_index = word.rfind(vowels, 0, right_vowel_index)


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = "aeiouAEIOU"
    index = word.rfind("a")
    if index == -1:
        return ""
    
    left_index = index - 1
    while left_index >= 0 and word[left_index] not in vowels:
        left_index -= 1
    
    right_index = index + 1
    while right_index < len(word) and word[right_index] not in vowels:
        right_index += 1
    
    return word[left_index + 1:right_index]


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    
    left_vowel = ""
    right_vowel = ""
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels:
            left_vowel = word[i - 1]
            break
            
    for i in range(len(word)):
        if word[i] in vowels:
            right_vowel = word[i]
            break
            
    if left_vowel and right_vowel:
        return min(left_vowel, right_vowel)
    else:
        return ""


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    right_vowel = ""
    
    for c in word:
        if c in vowels:
            if right_vowel:
                return right_vowel
            right_vowel = c
            
    return right_vowel


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    result = ""
    
    for i in range(len(word) - 1, -1, -1):
        if word[i] in vowels:
            result = word[i]
            break
    
    return result


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    word = list(word)


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = "aeiouAEIOU"
    
    index = -1
    for i, c in enumerate(word):
        if c in vowels:
            index = i
            break
            
    if index == -1:
        return ""
    
    left_vowel = word[index - 1]
    right_vowel = word[index + 1]
    
    if right_vowel in vowels and left_vowel in vowels:
        return ""
    
    if left_vowel in vowels:
        return right_vowel
    else:
        return left_vowel


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    right_index = 0
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels:
            right_index = i
            break
    
    left_index = right_index - 1
    while left_index >= 0 and word[left_index] in vowels:
        left_index -= 1
    
    if left_index < 0:
        return ""
    
    return word[left_index + 1:right_index]


ProblemHumanEval/118: failed: 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    vowels = ["a", "e", "i", "o", "u"]
    word_length = len(word)
    
    if word_length < 2:
        return ""


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/119: failed: 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    stack = []
    for c in lst:
        if c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != '(':
                return 'No'
            stack.pop()
    return 'Yes' if not stack else 'No'


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
            heapq.heapify(max_heap)
            heapq.heappop(max_heap)
        else:
            if num > max_heap[0]:
                heapq.heappushpop(max_heap, num)
    return max_heap


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
            heapq.heapify(max_heap)
            heapq.heappop(max_heap)
        else:
            if num > max_heap[0]:
                heapq.heappushpop(max_heap, num)
    return max_heap


ProblemHumanEval/120: failed: 
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
        else:
            if num > max_heap[0]:
                max_heap[0] = num
                heapq.heapify(max_heap)
                heapq.heappop(max_heap)
    return max_heap


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for i in range(k):
        max_heap.append(arr[i])
        heapq.heapify(max_heap)
        if arr[i + k] > max_heap[0]:
            heapq.heappop(max_heap)
            heapq.heappush(max_heap, arr[i + k])
    return max_heap


ProblemHumanEval/120: failed: 
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
        else:
            if num > max_heap[0]:
                max_heap[0] = num
                heapq.heapify(max_heap)
    return max_heap


ProblemHumanEval/120: failed: 
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for i in range(k):
        while max_heap and arr[max_heap[0]] < arr[i]:
            max_heap.pop(0)
        max_heap.append(i)
    return [arr[i] for i in max_heap]


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
            heapq.heapify(max_heap)
            heapq.heappop(max_heap)
        else:
            if num > max_heap[0]:
                heapq.heappushpop(max_heap, num)
    return max_heap


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for num in arr:
        if len(max_heap) < k:
            max_heap.append(num)
            heapq.heapify(max_heap)
            heapq.heappop(max_heap)
        else:
            if num > max_heap[0]:
                heapq.heappushpop(max_heap, num)
    return max_heap


ProblemHumanEval/120: failed: 
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for i in range(k):
        while max_heap and arr[max_heap[0]] < arr[i]:
            max_heap.pop(0)
        max_heap.append(i)
    return [arr[max_heap[0]]] + [arr[i] for i in max_heap[1:]]


ProblemHumanEval/120: failed: name 'heapq' is not defined
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
    max_heap = []
    for i in range(k):
        max_heap.append(-arr[i])
        heapq.heapify(max_heap)


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    return sum(lst[i] for i in range(0, len(lst), 2) if i % 2 == 0)


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    sum = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            sum += lst[i]
    return sum


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    return sum(x for x in lst if x % 2 == 0)


ProblemHumanEval/121: passed
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    total = 0
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 == 1:
            total += lst[i]
    return total


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    sum = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            sum += lst[i]
    return sum


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    sum = 0
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 == 0:
            sum += lst[i]
    return sum


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    result = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            result += lst[i]
    return result


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    sum = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            sum += lst[i]
    return sum


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    result = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            result += lst[i]
    return result


ProblemHumanEval/121: failed: 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
    result = 0
    for i in range(len(lst)):
        if i % 2 == 0:
            result += lst[i]
    return result


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    sum = 0
    for i in range(k):
        sum += arr[i]
    return sum


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    return sum(max(arr[i:i + k], default=0) for i in range(k))


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    result = []
    for i in range(k):
        result.append(arr[i] % 10)
        arr[i] //= 10
    while arr:
        result.append(arr.pop(0))
    return result


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    n = len(arr)
    sum = 0
    for i in range(k):
        sum += arr[i]
    
    for i in range(k, n):
        arr[i] += arr[i - k]
        
    return sum


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    sum = 0
    for i in range(k):
        sum += arr[i]
    return sum


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    return sum(max(arr[i:i + k], default=0) for i in range(len(arr) - k + 1))


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    result = 0
    for i in range(k):
        result += arr[i]
    return result


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    return sum(min(i, 9) for i in arr[:k])


ProblemHumanEval/122: failed: list index out of range
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    n = len(arr)
    sum = 0
    for i in range(k):
        sum += arr[i]
    
    for i in range(k, n):
        arr[i] += arr[i - k]
    
    for i in range(n - 1, k - 1, -1):
        arr[i] += arr[i + k]
    
    return sum


ProblemHumanEval/122: failed: 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    sum = 0
    for i in range(k):
        sum += arr[i]
    return sum


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n < 1:
        return []
    result = [1]
    while n != 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        result.append(n)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n == 1:
        return [1]
    result = []
    current = n
    while current != 1:
        if current % 2 == 1:
            result.append(current)
        current = (current + 1) // 2
    result.append(1)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n <= 1:
        return [1]
    odd_collatz = [1]
    while n > 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        odd_collatz.append(n)
    return odd_collatz


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n <= 1:
        return []
    result = [1, n]
    while n != 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        result.append(n)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    result = []
    while n > 1:
        if n % 2 == 1:
            result.append(n)
        n = n // 2
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    result = []
    while n > 1:
        if n % 2 == 1:
            result.insert(0, n)
        n = n // 2
    result.insert(0, 1)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n < 1:
        return []
    result = [n]
    while n != 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        result.append(n)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    result = []
    while n > 1:
        if n % 2 == 1:
            result.insert(0, n)
        n = n // 2
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    result = []
    while n > 1:
        if n % 2 == 1:
            result.insert(0, n)
        n = n // 2
    result.insert(0, 1)
    return result


ProblemHumanEval/123: failed: 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    if n == 1:
        return [1]
    result = []
    while n > 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
        result.append(n)
    return result


ProblemHumanEval/124: failed: 
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    date_parts = date.split('-')
    if len(date_parts) != 3:
        return False
    month = int(date_parts[0])
    day = int(date_parts[1])
    year = int(date_parts[2])
    if month < 1 or month > 12:
        return False
    if month == 2 and (day < 1 or day > 29):
        return False
    if month in (4, 6, 9, 11) and (day < 1 or day > 30):
        return False
    if month == 1 and (day < 1 or day > 31):
        return False
    if year < 1900 or year > 2100:
        return False
    return True


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    date_list = date.split('-')
    if len(date_list) != 3:
        return False
    month = int(date_list[0])
    day = int(date_list[1])
    year = int(date_list[2])
    if month < 1 or month > 12:
        return False
    if month == 2 and day > 29:
        return False
    if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:
        return False
    if month == 2 and day > 28:
        return False
    if year < 1000:
        return False
    if day < 1 or day > 31:
        return False
    return True


ProblemHumanEval/124: failed: 
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    days = date.split('-')
    month = int(days[0])
    day = int(days[1])
    year = int(days[2])


ProblemHumanEval/124: failed: 
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    date_parts = date.split('-')
    if len(date_parts) != 3:
        return False
    if not date_parts[0].isdigit() or not date_parts[1].isdigit() or not date_parts[2].isdigit():
        return False
    if int(date_parts[0]) < 1 or int(date_parts[0]) > 12:
        return False
    if int(date_parts[1]) < 1 or int(date_parts[1]) > 31:
        return False
    if int(date_parts[2]) < 1 or int(date_parts[2]) > 12:
        return False
    if int(date_parts[0]) == 2 and int(date_parts[1]) > 29:
        return False
    return True


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    days = date.split('-')
    if len(days) != 3:
        return False
    month = int(days[0])
    day = int(days[1])
    year = int(days[2])
    if month < 1 or month > 12 or day < 1 or day > 31:
        return False
    if month == 2 and day > 29:
        return False
    if month > 2 and day > 30:
        return False
    if year < 1000 or year > 3000:
        return False
    return True


ProblemHumanEval/124: failed: 
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if date == '':
        return False
    days = date.split('-')
    month = int(days[0])
    day = int(days[1])
    year = int(days[2])


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if not date:
        return False
    date_parts = date.split('-')
    if len(date_parts) != 3:
        return False
    month = int(date_parts[0])
    day = int(date_parts[1])
    year = int(date_parts[2])
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if month in (4, 6, 9, 11):
        if day > 30:
            return False
    elif month == 2:
        if day > 29:
            return False
    else:
        if day > 28:
            return False
    if year < 1000:
        return False
    return True


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if len(date) == 0:
        return False
    try:
        month, day, year = map(int, date.split('-'))
        if month < 1 or month > 12:
            return False
        if day < 1 or day > 31:
            return False
        if month == 2 and day > 29:
            return False
        if year < 1900 or year > 2100:
            return False
        return True
    except:
        return False


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if len(date) == 0:
        return False
    try:
        month, day, year = map(int, date.split('-'))
    except ValueError:
        return False
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if month in (4, 6, 9, 11):
        if day > 30:
            return False
    else:
        if day > 29:
            return False
    if year < 1000:
        return False
    return True


ProblemHumanEval/124: passed
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
    if not date or len(date) < 7:
        return False
    date_parts = date.split('-')
    if len(date_parts) != 3:
        return False
    month, day, year = map(int, date_parts)
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if month == 2 and day > 29:
        return False
    if year < 1900 or year > 2100:
        return False
    return True


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/125: failed: 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
    return txt.split()


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) < 2:
        return True
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
    return True


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) < 2:
        return True
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
    return True


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) < 2:
        return True
    
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
    
    return True


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) < 2:
        return True
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
    return True


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) < 2:
        return True
    
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
    
    return True


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))


ProblemHumanEval/126: failed: This prints if this assert fails 5 (good for debugging!)
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:
        return "NO"
    
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    
    if start > end:
        return "NO"
    
    return "YES"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2
    if start1 > end2 or start2 > end1:
        return "NO"
    if start1 < end2 and start2 < end1:
        return "YES"
    return "NO"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    if interval1[0] >= interval2[1] or interval2[0] >= interval1[1]:
        return "NO"
    return "YES"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2
    if start1 > end2 or start2 > end1:
        return "NO"
    if start1 > start2 and end1 > end2:
        return "NO"
    if start1 < start2:
        start1, end1 = start2, end2
    if end1 < end2:
        start2, end2 = start1, end1
    return "YES"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:
        return "NO"
    
    return "YES" if (interval1[0] <= interval2[1] and interval2[0] <= interval1[1]) else "NO"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:
        return "NO"
    return "YES"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2
    if start1 > end2 or start2 > end1:
        return "NO"
    if start1 < end2 and start2 < end1:
        return "YES"
    return "NO"


ProblemHumanEval/127: failed: 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
    start1, end1 = interval1
    start2, end2 = interval2


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    sum_ = 0
    for num in arr:
        if num > 0:
            sum_ += num
        elif num < 0:
            sum_ -= num
        else:
            return 0
    return sum_


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    res = 0
    for num in arr:
        if num > 0:
            res += num
        elif num < 0:
            res -= num
        else:
            res = 0
    return res


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    res = 0
    for num in arr:
        if num > 0:
            res += num
        elif num < 0:
            res -= num
        else:
            res += 0
    return res


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    sum_of_magnitudes = 0
    for num in arr:
        if num > 0:
            sum_of_magnitudes += num
        elif num < 0:
            sum_of_magnitudes -= num
        else:
            return 0
    return sum_of_magnitudes


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    return sum(x * (-1 if x < 0 else 1) for x in arr)


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None


ProblemHumanEval/128: failed: 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
    if not arr:
        return None
    sum_ = 0
    for num in arr:
        if num > 0:
            sum_ += num
        elif num < 0:
            sum_ -= num
        else:
            sum_ += 0
    return sum_


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[float('inf')] * n for _ in range(m)]
    dp[0][0] = grid[0][0]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
    return dp[m - 1][n - 1]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    for i in range(1, m):
        dp[i][0] = dp[i - 1][0] + grid[i][0]
    for j in range(1, n):
        dp[0][j] = dp[0][j - 1] + grid[0][j]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
    return dp[m - 1][n - 1]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
            if i >= k and j >= k:
                dp[i][j] = min(dp[i][j], dp[i - k][j - k] + grid[i][j])
    return dp[m - 1][n - 1]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[float('inf')] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
    for i in range(m - 2, -1, -1):
        for j in range(n - 2, -1, -1):
            dp[i][j] = min(dp[i][j], dp[i + 1][j], dp[i][j + 1]) + grid[i][j]
    return dp[0]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    for i in range(1, m):
        dp[i][0] = dp[i - 1][0] + grid[i][0]
    for j in range(1, n):
        dp[0][j] = dp[0][j - 1] + grid[0][j]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
    return dp[m - 1][n - 1]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[float('inf')] * n for _ in range(m)]
    dp[0][0] = grid[0][0]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[float('inf')] * n for _ in range(m)]
    dp[0][0] = grid[0][0]


ProblemHumanEval/129: failed: 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n < 0:
        return []
    if n == 0:
        return [3]
    if n == 1:
        return [1, 3, 2]
    result = [1, 3, 2]
    for i in range(3, n + 1):
        result.append(result[-1] + result[-2] + result[-3])
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n <= 2:
        return [1] * (n + 1)
    else:
        return [1, 1, 2, 3, 5, 8, 13] + tri(n - 4)


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n <= 0:
        return []
    if n == 1:
        return [3]
    if n == 2:
        return [1, 2, 3]
    result = [1, 2, 3]
    for i in range(3, n + 1):
        result.append(result[-2] + result[-1] + result[-2])
    return result


ProblemHumanEval/117: failed: First test error: ['', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'y', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'y had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'y had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'y had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'ry', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ry had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ry had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ry had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'y', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'y had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'y had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'y had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'ary', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ary had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ary had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ary had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'y', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'y had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'y had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'y had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'ry', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ry had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ry had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ry had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'y', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'y had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'y had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'y had a little', '', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', ' had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' had a little', 'Mary', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'had', '', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ittle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'ttle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'tle', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'le', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'e', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', 'little', 'lamb', 'lamb', 'lamb', 'lamb', 'lamb', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'had a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'ad', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'ad a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ad a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'd', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'd a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'd a little', '', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', ' a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' a little', 'Mary had', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'a little', '', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', ' little', 'Mary had a', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'little', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ittle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'ttle', '', 'e', '', 'le', '', 'e', '', 'tle', '', 'e', '', 'le', '', 'e', '', 'Mary had a little']
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    if not s:
        return []
    
    words = []
    
    for i in range(len(s) - n + 1):
        if n == 0:
            words.append(s)
        elif s[i] == ' ':
            words.append(s[:i])
            words.extend(select_words(s[i + 1:], n - 1))
        else:
            words.extend(select_words(s[i + 1:], n))
            
    return words


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n < 0:
        return []
    if n == 0:
        return [3]
    if n == 1:
        return [1, 3, 2]
    result = [1, 3, 2]
    for i in range(3, n + 1):
        result.append(result[-1] + result[-2] + result[-3])
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n < 0:
        return []
    if n == 0:
        return [0]
    if n == 1:
        return [3]
    result = [1, 3, 2, 8]
    n -= 4
    while n > 0:
        result.append(result[-1] + result[-2] + result[-3])
        n -= 3
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n == 0:
        return [0]
    if n == 1:
        return [3]
    if n == 2:
        return [1, 2, 3]
    result = [1, 2, 3]
    for i in range(3, n + 1):
        result.append(result[-2] + result[-1] + result[-3])
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n == 0:
        return []
    if n == 1:
        return [3]
    if n == 2:
        return [1, 2, 3]
    
    result = [1, 2, 3]
    
    for i in range(3, n + 1):
        result.append(result[-2] + result[-1] + result[-3])
    
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n <= 2:
        return [1] * (n + 1)
    else:
        return [1, 1, 1] + tri(n - 1) + tri(n - 2) + tri(n - 3)


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n < 0:
        return []
    if n == 0:
        return [3]
    if n == 1:
        return [1, 3, 2]
    result = [1, 3, 2]
    for i in range(3, n + 1):
        result.append(result[-1] + result[-2] + result[-3])
    return result


ProblemHumanEval/130: failed: 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
    if n <= 2:
        return [1] * (n + 1)
    
    result = [1, 1, 1]
    for i in range(3, n + 1):
        result.append(result[-1] + result[-2] + result[-3])
    
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/131: failed: 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
    result = 0
    while n > 0:
        result = result * 10 + n % 10
        n //= 10
    return result


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack or stack[-1] != '[':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack:
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack or stack[-1] != '[':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack or stack[-1] != '[':
                return False
            stack.pop()
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/132: failed: 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    stack = []
    for c in string:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return False
    return not stack


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum_of_squares = 0
    for x in lst:
        sum_of_squares += x**2
    return sum_of_squares


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum_of_squares = 0
    for num in lst:
        sum_of_squares += num * num
    return sum_of_squares


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum_of_squares = 0
    for x in lst:
        sum_of_squares += x * x
    return sum_of_squares


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum = 0
    for i in lst:
        sum += i*i
    return sum


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum = 0
    for i in lst:
        sum += i * i
    return sum


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    return sum(map(lambda x: int(x**0.5), lst))


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum_of_squares = 0
    for num in lst:
        sum_of_squares += num * num
    return sum_of_squares


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    return sum(x**2 for x in lst)


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    sum_of_squares = 0
    for num in lst:
        sum_of_squares += num ** 2
    return sum_of_squares ** 0.5


ProblemHumanEval/133: failed: This prints if this assert fails 1 (good for debugging!)
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
    return sum(map(lambda x: int(x**0.5), lst))


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    return txt[-1].isalpha() and not txt[-1].isalnum()


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if not txt:
        return False
    last_char = txt[-1]
    return (last_char.isalpha() and not last_char.isalnum()) or last_char == " "


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if len(txt) == 0:
        return False
    return not txt[-1].isalpha() and txt[-1] != ' '


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if txt[-1].isalpha():
        return True
    return False


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if txt[-1].isalpha():
        return True
    return False


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    return txt[-1].isalpha() and txt[-1].isalpha() and not txt[-1].isspace()


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    return txt[-1].isalpha() and txt[-1].isalpha() and not txt[-1].isalnum()


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    return txt[-1].isalpha() and txt[-1].isalpha()


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if len(txt) == 0:
        return False
    return not txt[-1].isalpha() and not txt[-1].isdigit()


ProblemHumanEval/134: failed: 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
    if len(txt) == 0:
        return False
    return not txt[-1].isalpha() and not txt[-1].isdigit()


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    if n < 3:
        return -1
    
    max_index = -1
    for i in range(n):
        if arr[i] > arr[i + 1]:
            max_index = i
            break
    
    if max_index == -1:
        return n - 1
    
    for i in range(n):
        if arr[i] > arr[max_index] and arr[i] > arr[max_index - 1]:
            return -1
    
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    if n < 2:
        return -1
    max_index = 0
    for i in range(n):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    max_index = -1
    for i in range(n):
        if arr[i] < arr[i - 1]:
            max_index = i - 1
            break
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    if n == 0:
        return -1
    max_index = -1
    for i in range(n):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    max_index = -1
    for i in range(n):
        if arr[i] > arr[i - 1]:
            max_index = i - 1
            break
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    max_index = -1
    for i in range(n):
        if arr[i] > arr[i - 1]:
            max_index = i - 1
            break
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    if n == 1:
        return 0
    max_index = 0
    for i in range(1, n):
        if arr[i] <= arr[max_index]:
            max_index = i
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    if n % 2 == 1:
        return -1
    
    max_index = 0
    for i in range(1, n - 1, 2):
        if arr[i] >= arr[i - 1]:
            max_index = i
        else:
            break
    
    if max_index == 0 or arr[max_index] >= arr[max_index - 1]:
        return max_index
    
    return -1


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    max_index = -1
    for i in range(n):
        if arr[i] > arr[i - 1]:
            max_index = i
            break
    return max_index


ProblemHumanEval/135: failed: 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
    n = len(arr)
    max_index = -1
    for i in range(n):
        if arr[i] > arr[i - 1]:
            max_index = i
            break
    return max_index


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None
    min_val = min(lst)
    max_val = max(lst)
    if min_val >= 0:
        return min_val, max_val
    else:
        return -max_val, -min_val


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None
    min_val = min(lst)
    max_val = max(lst)
    if min_val >= 0:
        return min_val, max_val
    else:
        return -max_val, -min_val


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None
    min_val = min(lst)
    max_val = max(lst)
    if min_val < 0:
        min_val = -min_val
    if max_val > 0:
        max_val = -max_val
    return min_val, max_val


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return (None, None)
    
    min_val = min(lst)
    max_val = max(lst)
    
    if min_val >= 0:
        return (None, max_val)
    
    return (min_val, None)


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return (None, None)
    
    max_neg = min_pos = None
    for n in lst:
        if n > 0:
            min_pos = n
        else:
            max_neg = n
    
    if max_neg and min_pos:
        return (max_neg, min_pos)
    elif max_neg:
        return (max_neg, None)
    elif min_pos:
        return (None, min_pos)
    else:
        return (None, None)


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return (None, None)
    min_val = min(lst)
    max_val = max(lst)
    if min_val >= 0:
        return (max_val, min_val)
    else:
        return (min_val, max_val)


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None
    min_val, max_val = min(lst), max(lst)
    return (max_val if min_val < 0 else None, min_val if max_val > 0 else None)


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return (None, None)
    max_neg = min_pos = None
    for num in lst:
        if num > 0:
            if max_neg is None or num > max_neg:
                max_neg = num
        else:
            if min_pos is None or -num < min_pos:
                min_pos = -num
    return (max_neg, min_pos)


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None


ProblemHumanEval/136: failed: 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    if not lst:
        return None, None
    min_val, max_val = min(lst), max(lst)
    if min_val < 0:
        min_val = -min_val
    if max_val > 0:
        max_val = -max_val
    return (max_val, min_val)


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a > b:
        return a
    return b


ProblemHumanEval/137: failed: 
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a > b:
        return b
    if a < b:
        return a
    return None


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    if isinstance(a, (int, float)) and isinstance(b, (int, float)):
        return a if a > b else b
    return a if a > b else b


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    return a if a > b else b


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    if isinstance(a, str) and isinstance(b, str):
        if a > b:
            return a
        return b
    if a > b:
        return a
    return b


ProblemHumanEval/137: failed: 
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    if type(a) == type(b):
        return a if a > b else b
    return a if type(a) == float else b


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a > b:
        return a
    else:
        return b


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    if type(a) is int and type(b) is float:
        return b
    if type(a) is float and type(b) is int:
        return a
    return a if a > b else b


ProblemHumanEval/137: failed: '>' not supported between instances of 'int' and 'str'
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a == b:
        return None
    return a if a > b else b


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    if n % 2 == 0:
        return n % 4 == 0
    return False


ProblemHumanEval/137: failed: 
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
    if a > b:
        return b
    else:
        return a


ProblemHumanEval/115: timed out
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
    n = len(grid)
    max_water = 0
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                max_water = max(max_water, capacity)
                grid[i][j] = 0
    
    time = 0
    while max_water > 0:
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    grid[i][j] = 0
                    max_water -= capacity
                    time += 1
    
    return time


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and i % 4 == 0:
            sum += i
    return sum == n


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and i % 4 == 0:
            sum += i
    return sum == n


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and i % 4 == 0:
            sum += i
    return sum == n


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and i % 4 == 0:
            sum += i
    return sum == n


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    return n % 4 == 0 and n % 2 == 0 and n % 3 == 0


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    return n % 2 == 0 and n % 4 == 0


ProblemHumanEval/138: failed: 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and i % 4 == 0:
            sum += i
    return sum == n


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


ProblemHumanEval/139: failed: Test 4
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
    if n <= 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(" ", "_")


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(" ", "_")


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/140: failed: This prints if this assert fails 4 (good for debugging!)
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
    return text.replace(' ', '_')


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    def _file_name_check(file_name):
        if len(file_name) > 3:
            return "No"
        if file_name[0] not in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
            return "No"
        if not file_name[1:]:
            return "No"
        if file_name[-3:] not in [".txt", ".exe", ".dll"]:
            return "No"
        return "Yes"
    return _file_name_check(file_name)


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    return "Yes" if (len(file_name) <= 3) or (file_name.count('.') == 1) or (file_name.startswith(string.ascii_letters) and file_name.endswith(('.txt', '.exe', '.dll'))) else "No"


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    return "Yes" if (len(file_name) > 3 and file_name.count('.') == 1 and file_name[0].isalpha() and file_name.endswith((".txt", ".exe", ".dll"))) else "No"


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    if len(file_name) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    if not file_name[0].isalpha():
        return 'No'
    if file_name[file_name.index('.') + 1:].lower() not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    if len(file_name) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    if file_name[0] not in string.ascii_letters or file_name[-1] not in ['.txt', '.exe', '.dll']:
        return 'No'
    return 'Yes'


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    if len(file_name) > 3:
        return 'No'
    if file_name[0] not in string.ascii_letters or file_name[0] == '.':
        return 'No'
    if len(file_name) > 1 and file_name[1] == '.':
        if file_name[2] not in ['txt', 'exe', 'dll']:
            return 'No'
    return 'Yes'


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    def check_file_name(file_name):
        if len(file_name) > 3:
            return "No"
        if file_name.count('.') != 1:
            return "No"
        if file_name[0] not in string.ascii_letters:
            return "No"
        if file_name[-1] not in ['.txt', '.exe', '.dll']:
            return "No"
        return "Yes"
    return check_file_name(file_name)


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    return "Yes" if file_name.isdigit() or file_name.count('.') == 1 and file_name[0].isalpha() and file_name[file_name.index('.')+1:].lower() in ['txt', 'exe', 'dll'] else "No"


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    if len(file_name) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    if file_name[0] not in string.ascii_letters:
        return 'No'
    if file_name[1] not in string.ascii_letters:
        return 'No'
    if file_name[2] not in ['.txt', '.exe', '.dll']:
        return 'No'
    return 'Yes'


ProblemHumanEval/141: failed: 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
    return 'Yes' if file_name.isdigit() or file_name.count('.') == 1 and file_name[0].isalpha() and file_name.endswith(('.txt', '.exe', '.dll')) else 'No'


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, elem in enumerate(lst):
        if i % 3 == 0:
            result += elem ** 2
        elif i % 4 == 0:
            result += elem ** 3
        else:
            result += elem
    return result


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, x in enumerate(lst):
        if i % 3 == 0:
            result += x * x
        elif i % 4 == 0:
            result += x * x * x
        else:
            result += x
    return result


ProblemHumanEval/142: failed: 
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    sum = 0
    for i, val in enumerate(lst):
        if i % 3 == 0:
            val = val ** 2
        if i % 4 == 0:
            val = val ** 3
        sum += val
    return sum


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, item in enumerate(lst):
        if i % 3 == 0:
            result += item * item
        elif i % 4 == 0:
            result += item * item * item
        else:
            result += item
    return result


ProblemHumanEval/142: failed: 
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, e in enumerate(lst):
        if i % 3 == 0:
            result += e * e
        if i % 4 == 0 and i % 3 != 0:
            result += e * e * e
    return result


ProblemHumanEval/142: failed: 
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    sum = 0
    for i, val in enumerate(lst):
        if i % 3 == 0:
            val = val ** 2
        if i % 4 == 0:
            val = val ** 3
        sum += val
    return sum


ProblemHumanEval/142: failed: 
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    sum = 0
    for i in range(len(lst)):
        if i % 3 == 0 or i % 4 == 0:
            sum += lst[i] * lst[i]
        else:
            sum += lst[i]
    return sum


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, x in enumerate(lst):
        if i % 3 == 0:
            result += x ** 2
        elif i % 4 == 0:
            result += x ** 3
        else:
            result += x
    return result


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, e in enumerate(lst):
        if i % 3 == 0:
            result += e * e
        elif i % 4 == 0:
            result += e * e * e
        else:
            result += e
    return result


ProblemHumanEval/142: passed
def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    result = 0
    for i, val in enumerate(lst):
        if i % 3 == 0:
            val = val ** 2
        elif i % 4 == 0:
            val = val ** 3
        result += val
    return result


ProblemHumanEval/143: failed: 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    result = ""
    for word in words:
        if len(word) % 2 == 0:
            result += word + " "
    return result


ProblemHumanEval/143: failed: name 'is_prime' is not defined
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return " ".join(prime_words)


ProblemHumanEval/143: failed: name 'primes' is not defined
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    result = []
    for word in words:
        if len(word) in primes:
            result.append(word)
    return " ".join(result)


ProblemHumanEval/143: failed: 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    result = ""
    for word in words:
        if len(word) % 2 == 0:
            result += word
    return result


ProblemHumanEval/143: failed: 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    return " ".join([str(len(word)) for word in words])


ProblemHumanEval/143: failed: 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    result = []
    for word in words:
        if len(word) % 2 == 0:
            result.append(word)
    return " ".join(result)


ProblemHumanEval/143: failed: 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    return " ".join([str(len(word)) for word in words])


ProblemHumanEval/143: failed: name 'is_prime' is not defined
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return " ".join(prime_words)


ProblemHumanEval/143: failed: name 'is_prime' is not defined
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return " ".join(prime_words)


ProblemHumanEval/143: failed: name 'is_prime' is not defined
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    words = sentence.split()
    result = []
    for word in words:
        if is_prime(len(word)):
            result.append(word)
    return " ".join(result)


ProblemHumanEval/144: failed: expected an indented block after 'if' statement on line 92 (<string>, line 93)
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0":
        return False
    if n == "0":
        return True
    if x == "1":
        return True
    if n == "1":
        return False
    if x == "-1":
        return False
    if n == "-1":
        return True
    if x == "-2":
        return False
    if n == "-2":
        return True
    if x == "3":
        return True
    if n == "3":
        return False
    if x == "-3":
        return False
    if n == "-3":
        return True
    if x == "4":
        return False
    if n == "4":
        return True
    if x == "-4":
        return True
    if n == "4":
        return False
    if x == "5":
        return True
    if n == "5":
        return False
    if x == "-5":
        return False
    if n == "5":
        return True
    if x == "6":
        return False
    if n == "6":
        return True
    if x == "-6":
        return True
    if n == "6":
        return False
    if x == "7":
        return False
    if n == "7":
        return True
    if x == "-7":
        return False
    if n == "7":
        return True
    if x == "8":
        return False
    if n == "8":
        return True
    if x == "-8":
        return True
    if n == "8":
        return False
    if x == "9":
        return False
    if n == "9":
        return True
    if x == "-9":
        return False
    if n == "9":
        return True
    if x == "10":
        return False
    if n == "10":
        return True
    if x == "-10":
        return True
    if n == "10":


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1":
        return True
    if x[-1] == "/":
        x = x[:-1]
    if n[-1] == "/":
        n = n[:-1]
    x_parts = x.split("/")
    n_parts = n.split("/")
    x_num = int(x_parts[0])
    x_den = int(x_parts[1])
    n_num = int(n_parts[0])
    n_den = int(n_parts[1])
    if n_den == 1:
        return x_num * n_num == x_den * n_num
    return False


ProblemHumanEval/144: failed: maximum recursion depth exceeded in comparison
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1":
        return True
    if x == "-1":
        return n != "0"
    if n == "1":
        return x != "0"
    if x[-1] == "/" and n[-1] == "/":
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    if x[-1] == "/" and n[-1] != "/":
        return simplify(x[:-1], n)
    if x[-1] != "/" and n[-1] == "/":
        return simplify(x, n[:-1])
    if x[-1] != "/" and n[-1] != "/":
        return simplify(x, n)
    return False


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1" or n == "1":
        return True
    if x[-1] == '/' and n[-1] == '/':
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    if x[-1] == '*' and n[-1] == '*':
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    if x[-1] == '+':
        return simplify(x[:-1], n) or simplify(x, n[:-1])
    if x[-1] == '-':
        return simplify(x[:-1], n) or simplify(x, n[:-1])
    return False


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0":
        return False
    if n == "0":
        return True
    if n == "1":
        return True if x == "1" else False
    if x == "-1":
        return False
    if x == "+":
        return simplify("-" + n, "1")
    if x == "-":
        return simplify(n, "1")
    if n[0] == "-":
        return simplify(x, n[1:])
    if n[0] == "+":
        return simplify(x, n[1:])
    if n[0] == "*":
        return simplify(x, n[1:]) or simplify(x, n[1:])
    if n[0] == "/":
        return simplify(x, n[1:]) or simplify(x, n[1:]) or simplify(x, n[1:])
    return False


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1" or n == "1":
        return True
    if x == "-1" or n == "-1":
        return False
    if x[-1] == '/' or n[-1] == '/':
        return False
    if x[0] == '-' and n[0] == '-':
        return False
    if x[0] == '-':
        x = x[1:]
    if n[0] == '-':
        n = n[1:]
    x_parts = x.split('/')
    n_parts = n.split('/')
    x_num = int(x_parts[0])
    x_den = int(x_parts[1])
    n_num = int(n_parts[0])
    n_den = int(n_parts[1])
    if x_den == 1:
        return n_num == n_den
    if n_den == 1:
        return x_num == x_den
    if x_den == n_den:
        return x_num * n_num == x_den * n_den
    return False


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1" or n == "1":
        return True
    if x[-1] == '/' and n[-1] == '/':
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    if x[-1] == '*' and n[-1] == '*':
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    return False


ProblemHumanEval/144: failed: invalid literal for int() with base 10: '1/5'
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1" or n == "1":
        return True
    if x == "-1" or n == "-1":
        return False
    if x[0] == '-' and n[0] == '-':
        return simplify(x[1:], n[1:])
    if x[0] == '-':
        return simplify(x[1:], n)
    if n[0] == '-':
        return simplify(x, n[1:])
    if int(x) == int(n):
        return True
    return False


ProblemHumanEval/144: failed: invalid syntax (<string>, line 62)
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1":
        return True
    if n == "1":
        return True
    if x == "-1":
        return True
    if n == "-1":
        return True
    if x == "-2":
        return False
    if n == "-2":
        return False
    if x == "-2/1" or n == "-2/1":
        return True
    if x == "-1/1" or n == "-1/1":
        return True
    if x == "1/1" or n == "1/1":
        return True
    if x == "1/-1" or n == "1/-1":
        return True
    if x == "-1/-1" or n == "-1/-1":
        return True
    if x == "1/-2" or n == "1/-2":
        return False
    if x == "-1/-2" or n == "-1/-2":
        return False
    if x == "1/3" or n == "1/3":
        return True
    if x == "-1/3" or n == "-1/3":
        return True
    if x == "1/-3" or n == "1/-3":
        return True
    if x == "-1/3" or n == "-1/3":
        return True
    if x == "1/4" or n == "1/4":
        return True
    if x == "-1/4" or n == "-1/4":
        return True
    if x == "1/-4" or n == "1/-4":
        return True
    if x == "-1/4" or n == "-1/4":
        return True
    if x == "1/5" or n == "1/5":
        return True
    if x == "-1/5" or n == "-1/5":
        return True
    if x == "1/-5" or


ProblemHumanEval/144: failed: test1
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    if x == "0" or n == "0":
        return False
    if x == "1" or n == "1":
        return True
    if x[-1] == '/' and n[-1] == '/':
        return simplify(x[:-1], n[:-1]) and simplify(x[-1], n[-1])
    if x[-1] == '*' and n[-1] == '*':
        return simplify(x[:-1], n[:-1]) or simplify(x[-1], n[-1])
    return False


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(map(int, str(x))))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(map(int, str(x))))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/145: failed: invalid literal for int() with base 10: '-'
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return sum(n > 10 and (n % 10 == 1 or n % 10 == 3) for n in nums)


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    count = 0
    for num in nums:
        if num > 10 and (num % 10 == 1 or num % 10 == 3) and (num % 100 != 11 and num % 100 != 13):
            count += 1
    return count


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    count = 0
    for num in nums:
        if num > 10 and (num % 10 == 1 or num % 10 == 3) and (num % 100 != 7 and num % 100 != 9):
            count += 1
    return count


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    count = 0
    for num in nums:
        if num > 10 and num % 2 == 1 and num % 10 != 0:
            count += 1
    return count


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    count = 0
    for num in nums:
        if num > 10 and (num % 10 == 1 or num % 10 == 3):
            count += 1
    return count


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return sum(1 for x in nums if x > 10 and (x % 10 == 1 or x % 10 == 3))


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return sum(num > 10 and num % 2 != 0 for num in nums)


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return sum(1 for num in nums if num > 10 and num % 2 != 0)


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return len([num for num in nums if num > 10 and (num % 2 == 1 or num % 10 == 1)])


ProblemHumanEval/146: failed: 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
    return len([x for x in nums if x > 10 and (x % 2 == 1 or x % 10 == 1)])


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) // 2


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) // 2


ProblemHumanEval/147: failed: name 'a' is not defined
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    max_triples = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    max_triples += 1
    return max_triples


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) // 2


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) * (n - 2) // 6


ProblemHumanEval/147: failed: name 'a' is not defined
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    max_triples = 0
    for i in range(1, n):
        for j in range(1, n):
            for k in range(1, n):
                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:
                    max_triples += 1
    return max_triples


ProblemHumanEval/147: failed: name 'a' is not defined
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    max_triples = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    max_triples += 1
    return max_triples


ProblemHumanEval/147: failed: name 'a' is not defined
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    max_triples = 0
    for i in range(1, n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    max_triples += 1
    return max_triples


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) * (n - 2) // 6


ProblemHumanEval/147: failed: 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
    return n * (n - 1) * (n - 2) // 6


ProblemHumanEval/148: failed: First test error: 2
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 in ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"] and \
       planet2 in ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]:
        return (planet1, planet2)
    else:
        return ()


ProblemHumanEval/148: failed: First test error: 2
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 in ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"] and \
       planet2 in ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]:
        return (planet1, planet2) if planet1 < planet2 else (planet2, planet1)
    return ()


ProblemHumanEval/148: failed: name 'planets' is not defined
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 not in planets or planet2 not in planets:
        return ()
    planets.sort()
    return tuple(planets[planets.index(planet1) + planets.index(planet2):])


ProblemHumanEval/148: failed: First test error: 0
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 != planet2:
        return ()
    planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    return tuple(planets[i] for i in (planets.index(planet1), planets.index(planet2) + 2))


ProblemHumanEval/148: failed: First test error: 0
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 != "Mercury" or planet2 != "Uranus":
        return ()
    return ("Venus", "Earth", "Mars", "Jupiter", "Saturn")


ProblemHumanEval/148: failed: name 'planets' is not defined
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 not in planets or planet2 not in planets:
        return ()
    planets.remove(planet1)
    planets.remove(planet2)
    return tuple(planets)


ProblemHumanEval/148: failed: '(' was never closed (<string>, line 47)
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 == "Mercury" and planet2 == "Venus":
        return ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    elif planet1 == "Mercury" and planet2 == "Earth":
        return ("Earth", "Mars", "Jupiter", "Saturn")
    elif planet1 == "Mercury" and planet2 == "Mars":
        return ("Mars", "Jupiter", "Saturn")
    elif planet1 == "Mercury" and planet2 == "Jupiter":
        return ("Jupiter", "Saturn")
    elif planet1 == "Mercury" and planet2 == "Saturn":
        return ("Saturn")
    elif planet1 == "Mercury" and planet2 == "Uranus":
        return ("Uranus")
    elif planet1 == "Mercury" and planet2 == "Neptune":
        return ("Neptune")
    elif planet1 == "Venus" and planet2 == "Earth":
        return ("Earth", "Mars", "Jupiter", "Saturn")
    elif planet1 == "Venus" and planet2 == "Mars":
        return ("Mars", "Jupiter", "Saturn")
    elif planet1 == "Venus" and planet2 == "Jupiter":
        return ("Jupiter", "Saturn")
    elif planet1 == "Venus" and planet2 == "Saturn":
        return ("Saturn")
    elif planet1 == "Venus" and planet2 == "Uranus":
        return ("Uranus")
    elif planet1 == "Venus" and planet2 == "Neptune":
        return ("Neptune")
    elif planet1 == "Earth" and planet2 == "Mars":
        return ("Mars", "Jupiter", "Saturn")
    elif planet1 == "Earth" and planet2 == "Jupiter":
        return ("Jupiter",


ProblemHumanEval/148: failed: First test error: 0
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 != planet2:
        return ()
    planets = ("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    return tuple(planets[i] for i in range(8) if i % 2 == 0)


ProblemHumanEval/148: failed: First test error: 0
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 != "Mercury" or planet2 != "Uranus":
        return ()
    return ("Venus", "Earth", "Mars", "Jupiter", "Saturn")


ProblemHumanEval/148: failed: expected ':' (<string>, line 39)
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
    if planet1 != "Mercury" and planet1 != "Venus" and planet1 != "Earth" and planet1 != "Mars" and planet1 != "Jupiter" and planet1 != "Saturn" and planet1 != "Uranus" and planet1 != "Neptune":
        return ()
    if planet2 != "Mercury" and planet2 != "Venus" and planet2 != "Earth" and planet2 != "Mars" and planet2 != "Jupiter" and planet2 != "Saturn" and planet2 != "Uranus" and planet2 != "Neptune":
        return ()
    
    if planet1 == "Mercury" and planet2 == "Venus":
        return ("Venus",)
    if planet1 == "Mercury" and planet2 == "Earth":
        return ("Earth", "Venus")
    if planet1 == "Mercury" and planet2 == "Mars":
        return ("Mars", "Earth", "Venus")
    if planet1 == "Mercury" and planet2 == "Jupiter":
        return ("Jupiter", "Mars", "Earth", "Venus")
    if planet1 == "Mercury" and planet2 == "Saturn":
        return ("Saturn", "Jupiter", "Mars", "Earth", "Venus")
    if planet1 == "Mercury" and planet2 == "Uranus":
        return ("Uranus", "Saturn", "Jupiter", "Mars", "Earth", "Venus")
    if planet1 == "Mercury" and planet2 == "Neptune":
        return ("Neptune", "Uranus", "Saturn", "Jupiter", "Mars", "Earth", "Venus")
    if planet1 == "Venus" and planet2 == "Earth":
        return ("Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    if planet


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    return sorted(lst, key=lambda x: len(x) if len(x) % 2 == 0 else len(x) + 1)


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    return sorted(lst, key=lambda x: len(x) if len(x) % 2 == 0 else len(x) + 1)


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    odd_words = [word for word in lst if len(word) % 2 != 0]
    sorted_words = sorted(lst, key=lambda word: len(word) // 2)
    return sorted_words + odd_words


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    result = sorted(lst, key=lambda x: len(x) % 2)
    return result


ProblemHumanEval/149: failed: ord() expected a character, but string of length 3 found
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    odd_words = [word for word in lst if len(word) % 2 != 0]
    sorted_words = sorted(lst, key=lambda word: len(word) if len(word) % 2 == 0 else ord(word))
    return sorted_words + odd_words


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    odd = [word for word in lst if len(word) % 2 != 0]
    sorted_list = sorted(lst, key=len)
    return odd + sorted_list


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    result = sorted(lst, key=len)
    return [word for word in result if len(word) % 2 == 0]


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    result = []
    lst.sort(key=len)
    for s in lst:
        if len(s) % 2 == 0:
            result.append(s)
    return result


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    result = sorted(lst, key=lambda s: len(s) if len(s) % 2 == 0 else len(s) + 1)
    return result


ProblemHumanEval/149: failed: 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
    result = []
    lst.sort(key=lambda x: len(x) if len(x) % 2 == 0 else len(x) + 1)
    for word in lst:
        if len(word) % 2 == 0:
            result.append(word)
    return result


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/150: failed: 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
    if n % 2 == 0:
        return x
    else:
        return y


ProblemHumanEval/151: failed: This prints if this assert fails 2 (good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    odd_sum = 0
    even_sum = 0
    for num in lst:
        if num % 2 == 1:
            odd_sum += num
        else:
            even_sum += num
    return odd_sum - even_sum


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    total = 0
    for n in lst:
        if n % 2 == 1:
            total += n ** 2
    return total


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    sum = 0
    for i in range(len(lst)):
        if lst[i] % 2 == 1:
            sum += lst[i] ** 2
    return sum


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    sum_of_squares = 0
    for num in lst:
        if num % 2 == 1:
            sum_of_squares += num ** 2
    return sum_of_squares


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    sum_of_squares = 0
    for num in lst:
        if num % 2 == 1:
            sum_of_squares += num ** 2
    return sum_of_squares


ProblemHumanEval/151: failed: This prints if this assert fails 2 (good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    odd_sum = 0
    even_sum = 0
    
    for num in lst:
        if num % 2 == 1:
            odd_sum += num
        else:
            even_sum += num
            
    return odd_sum * 2 - even_sum


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    sum = 0
    for num in lst:
        if num % 2 == 1:
            sum += num ** 2
    return sum


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    total = 0
    for i in range(len(lst)):
        if lst[i] % 2 == 1:
            total += lst[i] * lst[i]
    return total


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    sum_of_squares = 0
    for num in lst:
        if num % 2 == 1:
            sum_of_squares += num ** 2
    return sum_of_squares


ProblemHumanEval/151: failed: This prints if this assert fails 5 (also good for debugging!)
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    total = 0
    for item in lst:
        if item % 2 == 1:
            total += item ** 2
    return total


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: failed: '>' not supported between instances of 'int' and 'list'
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    score = 0
    guesses = []
    for g in guess:
        if g > game:
            score += 1
            guesses.append(g - game)
        elif g < game:
            score += 1
            guesses.append(game - g)
    return guesses


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] > game[i]:
            result.append(abs(guess[i] - game[i]))
        else:
            result.append(abs(game[i] - guess[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: passed
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    result = []
    for i in range(len(guess)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(guess[i] - game[i]))
    return result


ProblemHumanEval/152: failed: 5 is not in list
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
    score = 0
    guess_set = set(guess)
    for s in game:
        if s not in guess_set:
            score += abs(s - guess[guess.index(s)])
    return score


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest_extension = extensions[0]
    strongest_strength = -1
    for extension in extensions:
        extension_strength = (extension.count('A') - extension.count('a')) / len(extension)
        if extension_strength > strongest_strength:
            strongest_extension = extension
            strongest_strength = extension_strength
    return class_name + '.' + strongest_extension


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = extensions[0]
    strongest_strength = -1
    for extension in extensions:
        extension_strength = (extension.count('A') - extension.count('a')) / len(extension)
        if extension_strength > strongest_strength:
            strongest = extension
            strongest_strength = extension_strength
    return class_name + '.' + strongest


ProblemHumanEval/153: failed: list indices must be integers or slices, not str
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    extension_strength = {}
    for ext in extensions:
        cap = sum(1 for c in ext if c.isupper())
        sm = sum(1 for c in ext if c.islower())
        extension_strength[ext] = cap - sm
    return class_name + '.' + extensions[max(extension_strength, key=extension_strength.get)]


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = extensions[0]
    strength = -1
    for extension in extensions:
        extension_strength = 0
        extension_strength += (extension.count('A') - extension.count('a'))
        extension_strength += (extension.count('B') - extension.count('b'))
        extension_strength += (extension.count('C') - extension.count('c'))
        if extension_strength > strength:
            strongest = extension
            strength = extension_strength
    return class_name + '.' + strongest


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = class_name
    strongest_strength = -1
    for extension in extensions:
        extension_strength = 0
        for c in class_name:
            if c.isupper():
                extension_strength += 1
        for c in extension:
            if c.islower():
                extension_strength += 1
        if extension_strength > strongest_strength:
            strongest = extension
            strongest_strength = extension_strength
    return strongest


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = ''
    strongest_strength = -1
    
    for ext in extensions:
        if ext.isupper():
            upper_count = ext.count('A')
            lower_count = ext.count('a')
            strength = upper_count - lower_count
            if strength > strongest_strength:
                strongest = ext
                strongest_strength = strength
                
    return class_name + '.' + strongest


ProblemHumanEval/153: failed: string index out of range
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest_extension = extensions[0]
    strongest_strength = -1
    for extension in extensions:
        extension_strength = 0
        for i in range(len(class_name)):
            if class_name[i] == extension[i]:
                extension_strength += 1
        if extension_strength > strongest_strength:
            strongest_strength = extension_strength
            strongest_extension = extension
    return strongest_extension


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = class_name
    strongest_strength = -1
    
    for extension in extensions:
        extension_strength = 0
        
        for c in class_name:
            if c.isupper():
                extension_strength += 1
            else:
                extension_strength += 0
                
        for c in extension:
            if c.isupper():
                extension_strength -= 1
            else:
                extension_strength += 0
                
        if extension_strength > strongest_strength:
            strongest = extension
            strongest_strength = extension_strength
            
    return strongest


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest = extensions[0]
    strongest_strength = -1
    for extension in extensions:
        extension_strength = 0
        for c in class_name:
            if c.isupper():
                extension_strength += 1
            elif c.islower():
                extension_strength -= 1
        if extension_strength > strongest_strength:
            strongest = extension
            strongest_strength = extension_strength
    return strongest


ProblemHumanEval/153: failed: 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    strongest_extension = None
    strongest_strength = -1


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    return a in b or b in a


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    return a in b or b in a


ProblemHumanEval/154: failed: test #1
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    if a == b:
        return True
    if len(a) != len(b):
        return False
    
    for i in range(len(a)):
        if a[i] != b[i] and a[i] != b[len(a) - 1 - i] and a[i] != b[i + 1]:
            return False
    return True


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    if a == b:
        return True
    if a in b or b in a:
        return True
    return False


ProblemHumanEval/154: failed: test #0
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    if a == b:
        return True
    if a in b or b in a:
        return False
    return True


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    return a in b or b in a


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    return a in b or b in a


ProblemHumanEval/154: failed: test #3
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    return a in b or b in a


ProblemHumanEval/154: failed: test #0
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    if a == b:
        return True
    if a in b or b in a:
        return False
    return True


ProblemHumanEval/154: failed: test #1
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
    if a == b:
        return True
    if len(a) != len(b):
        return False
    if a in b:
        return True
    return False


ProblemHumanEval/155: failed: invalid literal for int() with base 10: '-'
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    count_even = 0
    count_odd = 0
    for digit in str(num):
        if int(digit) % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return (count_even, count_odd)


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    num_str = str(num)
    return (num_str.count('0'), num_str.count('1'))


ProblemHumanEval/155: failed: invalid literal for int() with base 10: '-'
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    count_even = count_odd = 0
    for digit in str(num):
        if int(digit) % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
    return count_even, count_odd


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    num_str = str(num)
    return (num_str.count('0'), num_str.count('1'))


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    num_str = str(num)
    return (num_str.count('0'), num_str.count('1'))


ProblemHumanEval/155: failed: 'int' object has no attribute 'count'
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    return (num.count(0), num.count(1))


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    num_str = str(num)
    return (num_str.count('0'), num_str.count('1'))


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    count = 0
    while num:
        count += num % 2
        num //= 10
    return (count, count)


ProblemHumanEval/155: failed: 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    count = 0
    while num > 0:
        if num % 2 == 0:
            count += 1
        num //= 10
    return (count, count)


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_map = {
        1000: "M",
        900: "CM",
        500: "D",
        400: "CD",
        100: "C",
        90: "XC",
        50: "L",
        40: "XL",
        10: "X",
        9: "IX",
        5: "V",
        4: "IV",
        1: "I"
    }


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I"),
    ]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_map = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',
                 100: 'C', 90: 'XC', 50: 'L', 40: 'XL',
                 10: 'X', 9: 'IX', 5: 'V', 4: 'IV',
                 1: 'I'}


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_map = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',
                 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I")
    ]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),
                     (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),
                     (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I"),
    ]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I"),
    ]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I"),
    ]


ProblemHumanEval/156: failed: 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
    roman_numerals = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"),
        (1, "I"), (0, "")
    ]


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return a * b > c * c or b * c > a * a or c * a > b * b or s * (s - a) * (s - b) * (s - c) < 0


ProblemHumanEval/157: failed: This prints if this assert fails 1 (good for debugging!)
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return (a * b > c * c and b * c > a * a and c * a > b * b) and (a * s == b * c and b * s == c * a and c * s == a * b)


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    return a + b > c and a + c > b and b + c > a


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return (a * b * c) > (s * (s - a) * (s - b) * (s - c))


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    return a + b > c and a + c > b and b + c > a


ProblemHumanEval/157: failed: This prints if this assert fails 1 (good for debugging!)
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return a * b > c * c and b * c > a * a and c * a > b * b and s * s - a * b - c * c == c * c - b * b and s * s - b * c - a * a == a * a - c * c and s * s - a * c - b * b == b * b - a * a
    
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return its area.
    Example:
    triangle_area(3, 4, 5) == 6
    triangle_area(1, 2, 3) == 0
    '''
    return (a + b + c) / 2 * (a + b + c) / 2


ProblemHumanEval/157: failed: This prints if this assert fails 1 (good for debugging!)
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return s * (s - a) * (s - b) * (s - c) == 0


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    return a + b > c and a + c > b and b + c > a


ProblemHumanEval/157: failed: 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    return a + b > c and a + c > b and b + c > a


ProblemHumanEval/157: failed: This prints if this assert fails 1 (good for debugging!)
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    s = (a + b + c) / 2
    return a * b * c == s * (s - a) * (s - b) * (s - c)


ProblemHumanEval/158: failed: t2
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    max_unique = 0
    max_word = ""
    for word in words:
        unique = len(set(word))
        if unique > max_unique:
            max_unique = unique
            max_word = word
    return max_word


ProblemHumanEval/158: failed: t2
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    max_chars = 0
    max_word = ""
    for word in words:
        if len(word) > max_chars:
            max_chars = len(word)
            max_word = word
    return max_word


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = {}


ProblemHumanEval/158: failed: t2
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    max_unique = 0
    max_word = ""
    for word in words:
        unique = len(set(word))
        if unique > max_unique:
            max_unique = unique
            max_word = word
    return max_word


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = set()
    for word in words:
        unique_chars.update(word)
    return "".join(sorted(unique_chars))


ProblemHumanEval/158: failed: t2
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    max_unique = 0
    max_word = ""
    for word in words:
        unique = len(set(word))
        if unique > max_unique:
            max_unique = unique
            max_word = word
    return max_word


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = set()
    for word in words:
        unique_chars.update(word)
    return "".join(sorted(unique_chars))


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = {}
    for word in words:
        unique_chars[word] = len(word)


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = {}
    for word in words:
        unique_chars[word] = len(word)
    max_length = max(unique_chars.values())
    max_word = ""
    for word, length in unique_chars.items():
        if length == max_length:
            max_word = word if word < max_word else max_word
    return max_word


ProblemHumanEval/158: failed: t1
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
    unique_chars = {}
    for word in words:
        for char in word:
            if char not in unique_chars:
                unique_chars[char] = 1
            else:
                unique_chars[char] += 1
    max_chars = 0
    max_word = ""
    for char, count in unique_chars.items():
        if count > max_chars:
            max_chars = count
            max_word = char
    return max_word


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number + need <= remaining:
        return [number + need, remaining - need]
    else:
        return [remaining, remaining - (number + need - remaining)]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number >= need:
        return [need, remaining - need]
    else:
        return [number, remaining]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number < need:
        return [number, remaining]
    else:
        return [need, remaining - need]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number < need:
        return [number, remaining]
    else:
        return [need, remaining - need]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number < need:
        return [number, remaining]
    else:
        return [need, remaining - need]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number >= need:
        return [need, remaining]
    return [number + remaining, remaining]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number + need > remaining:
        return [number + need, remaining]
    else:
        return [number + need, remaining - need]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number < need:
        return [number, remaining]
    else:
        return [need, remaining - need]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number + need <= remaining:
        return [number + need, remaining - need]
    else:
        return [remaining, remaining - (number + need - remaining)]


ProblemHumanEval/159: failed: Error
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
    if number < need:
        return [number, remaining]
    else:
        return [need, remaining - need]


ProblemHumanEval/160: failed: list index out of range
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    index = 0
    while index < len(operand):
        if operator[index] == '+':
            result += operand[index]
        elif operator[index] == '-':
            result -= operand[index]
        elif operator[index] == '*':
            result *= operand[index]
        elif operator[index] == '//':
            result //= operand[index]
        elif operator[index] == '**':
            result = operand[index] ** result
        index += 1
    return result


ProblemHumanEval/160: failed: Invalid operator
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    index = 0
    while index < len(operand):
        if operator[index] == '+':
            result += operand[index]
            index += 1
        elif operator[index] == '-':
            result -= operand[index]
            index += 1
        elif operator[index] == '*':
            result *= operand[index]
            index += 1
        elif operator[index] == '/':
            result //= operand[index]
            index += 1
        elif operator[index] == '^':
            result = operand[index] ** result
            index += 1
        else:
            raise Exception("Invalid operator")
    return result


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    for i in range(len(operand) - 1):
        result += operand[i] * operator.index(operator[i])
    result += operand[-1]
    return result


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    i = 0
    while i < len(operand) - 1:
        result += operand[i]
        if operator[i] == '+':
            i += 1
        elif operator[i] == '-':
            i += 1
            result -= operand[i]
        elif operator[i] == '*':
            i += 1
        else:
            result //= operand[i]
            i += 1
    result += operand[-1]
    return result


ProblemHumanEval/160: failed: list index out of range
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    i = 0
    while i < len(operand):
        if operator[i] == '+':
            result += operand[i]
        elif operator[i] == '-':
            result -= operand[i]
        elif operator[i] == '*':
            result *= operand[i]
        elif operator[i] == '//':
            result //= operand[i]
        else:
            result **= operand[i]
        i += 1
    return result


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    operator_length = len(operator)
    operand_length = len(operand) - 1


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    operator_length = len(operator)
    operand_length = len(operand)
    i = 0


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    operator_index = 0
    operand_index = 0


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    operator_index = 0
    operand_index = 0


ProblemHumanEval/160: failed: 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    result = 0
    i = 0
    while i < len(operand) - 1:
        if operator[i] == '+':
            result += operand[i + 1]
            i += 2
        elif operator[i] == '-':
            result -= operand[i + 1]
            i += 2
        elif operator[i] == '*':
            result *= operand[i + 1]
            i += 2
        elif operator[i] == '//':
            result //= operand[i + 1]
            i += 2
        elif operator[i] == '**':
            result = operand[i + 1] ** result
            i += 2
        else:
            raise Exception('Invalid operator: {}'.format(operator[i]))
    return result


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    result = []
    for c in s:
        if c.isalpha():
            result.append(c.upper() if c.islower() else c.lower())
        else:
            result.append(c)
    return "".join(result)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return s.swapcase()


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    result = []
    for c in s:
        if c.isalpha():
            result.append(c.upper() if c.islower() else c.lower())
        else:
            result.append(c)
    return "".join(result)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return "".join(c.lower() if c.isdigit() else c.upper() for c in s)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return "".join(c.upper() if c.islower() else c.lower() for c in s)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return "".join([c.lower() if c.isupper() else c.upper() for c in s])


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    result = ""
    for c in s:
        if c.isalpha():
            result += c.upper() if c.islower() else c.lower()
        else:
            result += c
    return result


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return "".join(c.upper() if c.islower() else c.lower() for c in s)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    result = []
    for c in s:
        if c.isalpha():
            result.append(c.lower() if c.islower() else c.upper())
        else:
            result.append(c)
    return ''.join(result)


ProblemHumanEval/161: failed: 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    return ''.join(c.lower() if c.isalpha() else c.upper() for c in s[::-1])


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/162: failed: name 'hashlib' is not defined
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
    if text == '':
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    if a > b:
        return []
    result = []
    for i in range(a, b + 1):
        result.append(i % 10)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    if a > b:
        return []
    result = []
    for i in range(a, b + 1):
        result.append(i % 10)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    if a > b:
        a, b = b, a
    return [i for i in range(a, b + 1) if i % 2 == 0]


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    result = []
    for i in range(a, b + 1):
        if i % 2 == 0:
            result.append(i)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    if a > b:
        return []
    result = []
    for i in range(a, b + 1):
        result.append(i % 10)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    if a > b:
        a, b = b, a
    return [i for i in range(a, b + 1) if i % 2 == 0]


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    result = []
    for i in range(a, b + 1):
        result.append(i % 10)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    result = []
    for i in range(a, b + 1):
        if i % 2 == 0:
            result.append(i)
    return result


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    return [i for i in range(a, b + 1) if i % 2 == 0]


ProblemHumanEval/163: failed: Test 1
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
    return [i for i in range(a, b + 1) if i % 2 == 0]


ProblemHumanEval/155: timed out
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    count_even = count_odd = 0
    while num:
        digit = num % 10
        if digit % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
        num //= 10
    return count_even, count_odd
Writing results to results/replit_leetcode/eval.jsonl_results.jsonl...
{'pass@1': 0.20060975609756096, 'pass@10': 0.25}
